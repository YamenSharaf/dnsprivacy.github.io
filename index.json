[
{
	"uri": "http://dnsprivacy.org/",
	"title": "DNS Privacy Project",
	"tags": [],
	"description": "",
	"content": "Welcome to the DNS Privacy project This site is the home of a collaborative open project to promote, implement and deploy DNS Privacy. The goals of this project include:\n(1) Raising awareness of the issue of DNS Privacy\n(2) Empowering users to take advantage of DNS Privacy tools and resources (client applications, DNS Privacy resolvers)\n(3) Evolving the DNS to support DNS Privacy and in particular developing new DNS Protocol standards\n(4) Working towards full support for DNS Privacy in a range of Open Source DNS implementations including: getdns, Unbound, NSD, BIND, PowerDNS and Knot (Auth and Resolver)\n(5) Co-ordinating deployment of DNS Privacy services and documenting operational practices\nAmong the many contributors to this project are Sinodun IT, NLnet Labs, SalesForce, Surftnet, NLnet Foundation, OTF, Stephane Bortzmeyer and No Mountain Software.\n     Please be patient while we complete the migration of our website (see below)!\n Ongoing DNS Privacy work August 2021  RFC 9310: Zone transfer over TLS (XoT) is published RFC 9102: TLS DNSSEC Chain Extension finally published in the Independent Submission stream after hitting the buffers in the TLS WG https://sdns2021.dnscrypt.info conference held online  July 2021  IETF 111 Discussions  ADD WG Agenda DPRIVE Session 1: DoQ and Unauthenticated encryption to Authoritatives DPRIVE Session 2: More discussion on how to signal Encryption at Authoritatives ANRW talks on DNS Privacy: Distributing Queries and Institutional Privacy   Great summary of the responses to Mozilla\u0026rsquo;s TRR consultation by Andrew Campling Firefox announces roll out of DoH by default (using CIRA) for Canadian users Apple iCould Private Relay will encrypt DNS and web traffic  See all previous DNS work  Overview of DNS Privacy Status High level overview of ongoing work on DNS Privacy with monthly updates\nIETF Working Groups Catch up with the latest standards being developed to support DNS Privacy in the DPRIVE Working group.\nWork on adaptive discovery mechanisms for DNS is happening in the ADD Working Group\nReference Material For a list of useful RFCs, Internet Drafts and presentations see the Reference Materialpage.\nSupport Thanks to NLnet Foundation, OTF and the Comcast Innovation Fund for donations to support DNS Privacy work. Thanks for past support from Verisign Labs.\nContact If you are interested in contributing to the project please contact:\n Sara Dickinson (sara@sinodun.com) Allison Mankin (allison.mankin@gmail.com) Benno Overeinder (benno@NLnetLabs.nl)  We have a Twitter account and a YouTube channel.\nComments, code and issues We are currently finishing the migration the dnsprivacy.org site to our new home:\n For comments, updates or corrections to content here, please create an issue in our GitHub project issue tracker All code has also been migrated to GitHub  "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/best_current_practices/comparison_of_policy_and_privacy_statements_2019/",
	"title": "Comparison of policy and privacy statements 2019",
	"tags": [],
	"description": "",
	"content": "The goal of this page is to provide a high level overview of the operations and privacy policies and practices (as published in 2019) of some of the larger DNS Privacy service offerings. NOTE: An analysis of privacy statements by operators will clearly only provide a snapshot at the time of writing. The page content was last reviewed on 18th Dec 2019. Please email any corrections to sara@sinodun.com\nOperators  Operators  Quad9 Cloudflare Google OpenDNS   Comparison  Policy Practice      Quad9 UDP/TCP and TLS (port 853) service provided on two addresses:\n  \u0026lsquo;Secure\u0026rsquo;: 9.9.9.9, 149.112.112.112, 2620:fe::fe, 2620:fe::9 \u0026lsquo;Unsecured\u0026rsquo;: 9.9.9.10, 149.112.112.10, 2620:fe::10, 2620:fe::fe:10  Policy:\n https://www.quad9.net/policy/ https://www.quad9.net/privacy/ https://www.quad9.net/faq/  Cloudflare UDP/TCP and TLS (port 853) service provided on 1.1.1.1, 1.0.0.1, 2606:4700:4700::1111 and 2606:4700:4700::1001.\nPolicy:\n https://developers.cloudflare.com/1.1.1.1/commitment-to-privacy/privacy-policy/privacy-policy/  DoH provided on: https://cloudflare-dns.com/dns-query\nPolicy:\n https://developers.cloudflare.com/1.1.1.1/commitment-to-privacy/privacy-policy/firefox/  Tor endpoint: https://dns4torpnlfs2ifuz2s2yf3fc7rdmsbhm6rw75euj35pac6ap25zgqad.onion\nGoogle UDP/TCP and TLS (port 853) service provided on 8.8.8.8, 8.8.4.4, 2001:4860:4860::8888 and 2001:4860:4860::8844.\nPolicy: https://developers.google.com/speed/public-dns/privacy\nOpenDNS UDP/TCP service provided on 208.67.222.222 and 208.67.220.220 (no IPv6).\nWe could find no specific privacy policy for the DNS resolution, only a general one from Cisco that seems focussed on websites.\nPolicy: https://www.cisco.com/c/en/us/about/legal/privacy-full.html\nComparison The following tables provides a high-level comparison of the policy and practice statements above and also some observations of practice measured at dnsprivacy.org. The data is not exhaustive and has not been reviewed or confirmed by the operators.\nThe List Items in the title are those from version -01 of the BCP for DNS privacy operators.\nA question mark indicates no clear statement or data could be located on the issue. A dash indicates the category is not applicable to the service.\nPolicy    List Item 1 2 3 4 5 6 7  Redirect NXDOMAIN IP address are PII IP address logging Clear list of what data stored and for how long Share anonymized data with partners Share identifiable data with partners Share or sell data to third parties Exceptions to collection for attack analysis non-profit Partners Combine DNS data with other data sources Redirect NXDOMAIN Block domains  Quad9 Secure Y N Y Y N N Y Y IBM\nPCH\nGCA\n N N Y  Quad9 Unsecured Y N Y Y N N Y Y N N N  Cloudflare\n Y N Y Y N N N N APNIC N N ?  Cloudflare DoH Y N Y Y N N N N Mozilla/\nFirefox N N ?  Google N Y(1) Y ? ? ? N N ? N N N(1)  OpenDNS Y Y N ? Y Y ? N ? Y N ?    (1) Only in temporary logs\nPractice    List Item 2 3 4 5 6   DNSSEC EDNS(0) Padding OOOR EDNS(0)\nKeepalive\n Query\nName Minimization\n Send\nECS\n Respect client ECS Local root zone Auth Domain Name SPKI pinset Juristdiction\n(TBD)  Obtaining consent\n(TBD)   Quad9 Secure Y N N N N N ? N Y N    Quad9 Unsecured N N N N N N ? N Y N    Cloudflare\n Y Y Y N Y N - Y Y N    Cloudflare DoH Y Y Y N Y N - Y - -    Google Y N Y N N Y Y N Y N    OpenDNS N - - - ? ? ? ? - -       (1) Only in exceptional circumstances\n"
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/lets_encrypt_certificate_renewal/automated_certificate_management_1/",
	"title": "Certificate management Method 1",
	"tags": [],
	"description": "",
	"content": " Background DNS setup  CNAMES   Configure dehydrated  Create a domains file Write a hook script   Write a script to download the certificates to your DNS servers    Background At Sinodun we use dehydrated https://github.com/lukas2511/dehydrated to manage our certificates. Also we use the dns-01 challenge to renew them.\nSince we run multiple DNS-over-TLS servers, the method used here employs a single \u0026lsquo;certificate management\u0026rsquo; server to renew the certificates, update the zone with the dns-01 challenge and make the renewed certificates available via ftp. A script is then run on each DNS server to download any new certificates using ftp to each server and restart the DNS service. In this example we use TLS proxies in front of BIND, or Knot resolver.\nDNS setup You could put the dns-01 challenge responses in your organisations main zone. However it is more flexible to dedicate a separate zone for that, especially if you are responsible for running the servers but someone else or some other organisation is responsible for the DNS.\nFor authoritative DNS we use knot https://www.knot-dns.cz/ because it has a nice interface for managing zones. The same effect could be obtained using dynamic updates.\nIt is a good idea to sign your zone if you are going to be putting challenge response records in it. However, the nameserver must be able to sign updates as they are applied.\nCNAMES Lets assume that we are managing certificates for two servers dnsovertls1.\u0026lt;YOURDOMAIN\u0026gt;. and dnsovertls.\u0026lt;YOURDOMAIN\u0026gt;.\nAdd CNAME RRs to the \u0026lt;YOURDOMAIN\u0026gt; zone like these. These will redirect queries for the dns-01 challenge to a dedicated zone which can exist on and be served by a dedicated certificate management server\n_acme-challenge.dnsovertls1.\u0026lt;YOURDOMAIN\u0026gt;. 300 CNAME dnsovertls1.\u0026lt;YOURDOMAIN\u0026gt;.acme.\u0026lt;YOURDOMAIN\u0026gt;. _acme-challenge.dnsovertls.\u0026lt;YOURDOMAIN\u0026gt;. 300 CNAME dnsovertls.\u0026lt;YOURDOMAIN\u0026gt;.acme.\u0026lt;YOURDOMAIN\u0026gt;. Delegate acme.\u0026lt;YOURDOMAIN\u0026gt; to the certificate management server by adding NS and DS RRs to the \u0026lt;YOURDOMAIN\u0026gt; zone. Lets assume the server is called ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;\nCreate an empty zone for acme.\u0026lt;YOURDOMAIN\u0026gt; (SOA and NS and A/AAAA RRs). Configure knot to sign the domain\nserver: listen: \u0026lt;YOURIP4\u0026gt;@53 listen: \u0026lt;YOURIP6\u0026gt;@53 user: knot:knot log: - target: syslog any: info policy: - id: dnssec algorithm: ECDSAP256SHA256 zone: - domain: acme.\u0026lt;YOURDOMAIN\u0026gt; file: \u0026#34;acme.\u0026lt;YOURDOMAIN\u0026gt;.zone\u0026#34; dnssec-signing: on dnssec-policy: dnssec acme.\u0026lt;YOURDOMAIN\u0026gt;. 3600 SOA ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;. user.\u0026lt;YOURDOMAIN\u0026gt;. 2016120927 30000 300 604800 300 acme.\u0026lt;YOURDOMAIN\u0026gt;. 3600 NS ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;. ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;. 3600 A \u0026lt;YOURIP4\u0026gt; ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;. 3600 AAAA \u0026lt;YOURIP6\u0026gt; Configure dehydrated Get dehydrated https://github.com/lukas2511/dehydrated and create some config. Uncomment the first two lines until you are sure everything is working. This will allow you to run the scripts for debugging without exceeding the production Let\u0026rsquo;s Encrypt limits\n ## CA=\u0026#34;https://acme-staging.api.letsencrypt.org/directory\u0026#34; ## CA_TERMS=\u0026#34;https://acme-staging.api.letsencrypt.org/terms\u0026#34; LICENSE=\u0026#34;https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf\u0026#34; CERTDIR=/\u0026lt;PATH\u0026gt;/dehydrated/certs DOMAINS_TXT=/\u0026lt;PATH\u0026gt;/dehydrated/dehydrated.domains CHALLENGETYPE=\u0026#34;dns-01\u0026#34; HOOK=/\u0026lt;PATH\u0026gt;/dehydrated/hook.sh PRIVATE_KEY_RENEW=\u0026#34;no\u0026#34; PRIVATE_KEY_ROLLOVER=\u0026#34;no\u0026#34; CONTACT_EMAIL=you AT email The two PRIVATE_KEY lines ensure that the key is not replaced and so SPKI pinning will work.\nCreate a domains file Create a dehydrated.domains file (/\u0026lt;PATH\u0026gt;/dehydrated/dehydrated.domains)\ndnsovertls.\u0026lt;YOURDOMAIN\u0026gt; dnsovertls1.\u0026lt;YOURDOMAIN\u0026gt; Write a hook script Create a hook.sh script (/\u0026lt;PATH\u0026gt;/dehydrated/hook.sh). #!/usr/bin/env bash set -e set -u set -o pipefail check_knotc_exit_code() { if [[ ! $1 -eq 0 ]] ; then /usr/sbin/knotc zone-abort acme.\u0026lt;YOURDOMAIN\u0026gt;. exit 1 fi } deploy_challenge() { local DOMAIN=\u0026#34;${1}.acme.\u0026lt;YOURDOMAIN\u0026gt;.\u0026#34; RDATA=\u0026#34;${3}\u0026#34; if [[ \u0026#34;${1}\u0026#34; == \u0026#34;ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;\u0026#34; ]] ; then DOMAIN=\u0026#34;_acme-challenge.${1}.\u0026#34; fi echo \u0026#34;Adding $DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34;\u0026#34; echo \u0026#34;zone-begin acme.\u0026lt;YOURDOMAIN\u0026gt;.\u0026#34; /usr/sbin/knotc zone-begin acme.\u0026lt;YOURDOMAIN\u0026gt;. check_knotc_exit_code $? echo \u0026#34;zone-set acme.\u0026lt;YOURDOMAIN\u0026gt;. $DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34;\u0026#34; /usr/sbin/knotc zone-set acme.\u0026lt;YOURDOMAIN\u0026gt;. $DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34; check_knotc_exit_code $? echo \u0026#34;zone-commit acme.\u0026lt;YOURDOMAIN\u0026gt;.\u0026#34; /usr/sbin/knotc zone-commit acme.\u0026lt;YOURDOMAIN\u0026gt;. check_knotc_exit_code $? } clean_challenge() { local DOMAIN=\u0026#34;${1}.acme.\u0026lt;YOURDOMAIN\u0026gt;.\u0026#34; RDATA=\u0026#34;${3}\u0026#34; if [[ \u0026#34;${1}\u0026#34; == \u0026#34;ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;\u0026#34; ]] ; then DOMAIN=\u0026#34;_acme-challenge.${1}.\u0026#34; fi echo \u0026#34;Removing $DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34;\u0026#34; echo \u0026#34;zone-begin acme.\u0026lt;YOURDOMAIN\u0026gt;.\u0026#34; /usr/sbin/knotc zone-begin acme.\u0026lt;YOURDOMAIN\u0026gt;. check_knotc_exit_code $? echo \u0026#34;zone-unset acme.\u0026lt;YOURDOMAIN\u0026gt;. $DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34;\u0026#34; /usr/sbin/knotc zone-unset acme.\u0026lt;YOURDOMAIN\u0026gt;. $DOMAIN TXT check_knotc_exit_code $? echo \u0026#34;zone-commit acme.\u0026lt;YOURDOMAIN\u0026gt;.\u0026#34; /usr/sbin/knotc zone-commit acme.\u0026lt;YOURDOMAIN\u0026gt;. check_knotc_exit_code $? } deploy_cert() { local DOMAIN=\u0026#34;${1}\u0026#34; KEYFILE=\u0026#34;${2}\u0026#34; CERTFILE=\u0026#34;${3}\u0026#34; FULLCHAINFILE=\u0026#34;${4}\u0026#34; CHAINFILE=\u0026#34;${5}\u0026#34; TIMESTAMP=\u0026#34;${6}\u0026#34; ## Copy cert files (not the keys) to your download site of choice - web, ftp etc... echo \u0026#34;Deploying certs to ftp server\u0026#34; echo \u0026#34;Deploy for domain ${DOMAIN}: ${CERTFILE} ${FULLCHAINFILE} ${CHAINFILE}\u0026#34; cp ${CERTFILE} /srv/ftp/certs/${DOMAIN}/ cp ${FULLCHAINFILE} /srv/ftp/certs/${DOMAIN}/ cp ${CHAINFILE} /srv/ftp/certs/${DOMAIN}/ chmod 644 /srv/ftp/certs/${DOMAIN}/* } unchanged_cert() { local DOMAIN=\u0026#34;${1}\u0026#34; KEYFILE=\u0026#34;${2}\u0026#34; CERTFILE=\u0026#34;${3}\u0026#34; FULLCHAINFILE=\u0026#34;${4}\u0026#34; CHAINFILE=\u0026#34;${5}\u0026#34; ## nothing yet.. } startup_hook() { ## This hook is called before the cron command to do some initial tasks ## (e.g. starting a webserver). for i in $(awk \u0026#39; { print $1 } \u0026#39; /\u0026lt;PATH\u0026gt;/dehydrated/dehydrated.domains ) ; do CERTPATH=/srv/ftp/certs/$i if [[ ! -d ${CERTPATH} ]] || \\ [[ $(stat -c %a ${CERTPATH}) -ne 770 ]] || \\ [[ $(stat -c %U ${CERTPATH}) != \u0026#34;\u0026lt;USER THE CERTS ARE CREATED BY\u0026gt;\u0026#34; ]] || \\ [[ $(stat -c %G ${CERTPATH}) != \u0026#34;ftp\u0026#34; ]] ; then echo \u0026#34;Creating, chmod, chown FTP directory for $i\u0026#34; mkdir -p ${CERTPATH} chown \u0026lt;USER THE CERTS ARE CREATED BY\u0026gt;:ftp ${CERTPATH} chmod 770 ${CERTPATH} fi done for i in $(cat /\u0026lt;PATH\u0026gt;/dehydrated/dehydrated.domains) ; do ## Now check that the zone owner has a CNAME pointing to us for this domain CNAME=$(dig _acme-challenge.$i CNAME +short) if [[ -z ${CNAME} ]] ; then echo \u0026#34;There is no CNAME pointing here for $i in the DNS\u0026#34; exit 1 fi done } exit_hook() { ## This hook is called at the end of the cron command and can be used to ## do some final (cleanup or other) tasks. : } invalid_challenge() { local DOMAIN=\u0026#34;${1}\u0026#34; RESPONSE=\u0026#34;${2}\u0026#34; ## This hook is called if the challenge response has failed, so domain ## owners can be aware and act accordingly. # ## Parameters: ## - DOMAIN ## The primary domain name, i.e. the certificate common ## name (CN). ## - RESPONSE ## The response that the verification server returned } request_failure() { local STATUSCODE=\u0026#34;${1}\u0026#34; REASON=\u0026#34;${2}\u0026#34; REQTYPE=\u0026#34;${3}\u0026#34; ## This hook is called when an HTTP request fails (e.g., when the ACME ## server is busy, returns an error, etc). It will be called upon any ## response code that does not start with \u0026#39;2\u0026#39;. Useful to alert admins ## about problems with requests. # ## Parameters: ## - STATUSCODE ## The HTML status code that originated the error. ## - REASON ## The specified reason for the error. ## - REQTYPE ## The kind of request that was made (GET, POST...) } HANDLER=\u0026#34;$1\u0026#34;; shift if [[ \u0026#34;${HANDLER}\u0026#34; =~ ^(deploy_challenge|clean_challenge|deploy_cert|unchanged_cert|invalid_challenge|request_failure|startup_hook|exit_hook)$ ]]; then \u0026#34;$HANDLER\u0026#34; \u0026#34;$@\u0026#34; fi Write a script to download the certificates to your DNS servers Do something like the following on each servers to download the certificates from your main certificate server. #!/usr/bin/env bash set -e set -u set -o pipefail if [[ ${LOGNAME} != \u0026#34;root\u0026#34; ]] ; then echo \u0026#34;Must be root. Exiting...\u0026#34; exit 1 fi ## depending on what you are using to terminate the TLS connections ## you might need to ensure the correct user can access the certificate files SERVICEAPP=$1 if [[ ${SERVICEAPP} == \u0026#34;haproxy\u0026#34; ]] || \\ [[ ${SERVICEAPP} == \u0026#34;knot-resolver\u0026#34; ]] ; then GROUPUSER=${SERVICEAPP} elif [[ ${SERVICEAPP} == \u0026#34;apache2\u0026#34; ]] || \\ [[ ${SERVICEAPP} == \u0026#34;apache\u0026#34; ]] || \\ [[ ${SERVICEAPP} == \u0026#34;nginx\u0026#34; ]] ; then GROUPUSER=\u0026#34;www-data\u0026#34; else echo \u0026#34;Unsupported service application. Exiting...\u0026#34; exit 1 fi CERTPATH=\u0026#34;/etc/certs\u0026#34; if [[ ! -d ${CERTPATH} ]] || \\ [[ $(stat -c %a ${CERTPATH}) -ne 750 ]] || \\ [[ $(stat -c %U ${CERTPATH}) != \u0026#34;root\u0026#34; ]] || \\ [[ $(stat -c %G ${CERTPATH}) != ${GROUPUSER} ]] ; then echo \u0026#34;No ${CERTPATH} directory or permissions not good.\u0026#34; echo \u0026#34;Do something like:\u0026#34; echo \u0026#34; sudo mkdir -p ${CERTPATH}\u0026#34; echo \u0026#34; sudo chmod 750 ${CERTPATH}\u0026#34; echo \u0026#34; sudo chown root:${GROUPUSER} ${CERTPATH}\u0026#34; echo \u0026#34;Exiting...\u0026#34; exit 1 fi cd ${CERTPATH} if [[ ! -f privkey.pem ]] || \\ [[ $(stat -c %a privkey.pem) -ne 640 ]] || \\ [[ $(stat -c %U privkey.pem) != \u0026#34;root\u0026#34; ]] || \\ [[ $(stat -c %G ${CERTPATH}/privkey.pem) != ${GROUPUSER} ]] || \\ [[ ! -s privkey.pem ]] ; then echo \u0026#34;Private key not found or permissions not good. Exiting...\u0026#34; exit 1 fi ## Use the hostname to figure out the cert CN CN=$(hostname -f) if [[ \u0026#34;${CN}\u0026#34; == \u0026#34;test1.dnsovertls.nl\u0026#34; ]] ; then CN=\u0026#34;dnsovertls.\u0026lt;YOURDOMAIN\u0026gt;\u0026#34; elif [[ \u0026#34;${CN}\u0026#34; == \u0026#34;test2.dnsovertls.nl\u0026#34; ]] ; then CN=\u0026#34;dnsovertls1.\u0026lt;YOURDOMAIN\u0026gt;\u0026#34; fi tar -cf backup-$(date +%s).tar *.pem curl -s --ssl-reqd --tlsv1 -O ftp://ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;:21/certs/${CN}/cert.pem curl -s --ssl-reqd --tlsv1 -O ftp://ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;:21/certs/${CN}/chain.pem curl -s --ssl-reqd --tlsv1 -O ftp://ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;:21/certs/${CN}/fullchain.pem if [[ ! -s cert.pem ]] || \\ [[ ! -s chain.pem ]] || \\ [[ ! -s fullchain.pem ]] ; then echo \u0026#34;At least one of the certificate files is empty or missing. Exiting...\u0026#34; exit 1 fi cat fullchain.pem \u0026gt; keycert.pem cat privkey.pem \u0026gt;\u0026gt; keycert.pem chmod 640 cert.pem chain.pem fullchain.pem keycert.pem chown root:${GROUPUSER} cert.pem chain.pem fullchain.pem keycert.pem if [[ ${SERVICEAPP} == \u0026#34;haproxy\u0026#34; ]] || \\ [[ ${SERVICEAPP} == \u0026#34;apache2\u0026#34; ]] || \\ [[ ${SERVICEAPP} == \u0026#34;nginx\u0026#34; ]] ; then INITNAME=${SERVICEAPP} elif [[ ${SERVICEAPP} == \u0026#34;apache\u0026#34; ]] ; then INITNAME=\u0026#34;apache2\u0026#34; else echo \u0026#34;Unsupported service application. Exiting...\u0026#34; exit 1 fi systemctl reload-or-restart ${INITNAME} "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/using_a_tls_proxy/building_haproxy_using_tlsv1_3/",
	"title": "Building HAProxy using TLSv1.3",
	"tags": [],
	"description": "",
	"content": "Building HAProxy so that it can use TLSv1.3 This page gives an outline of how to build HAProxy with OpenSSL so it can use TLS v1.3. It assumes Ubuntu 16.04 as the platform. Build Openssl In order to have TLS 1.3 support you will need to grab version 1.1.1 of OpenSSL.\nThese instructions build OpenSSL into a directory /opt/openssl-1.1.1 to ensure that it\u0026rsquo;s separate to any other OpenSSL installs on the machine.\nwget https://www.openssl.org/source/openssl-1.1.1.tar.gz tar -xzf openssl-1.1.1.tar.gz cd openssl-1.1.1 ./config --prefix=/opt/openssl-1.1.1 shared make sudo make install Build HAProxy You need HAProxy 1.8.1 or later to enable TLS 1.3 support. We are using 1.8.13.\nsudo apt install build-essential libpcre2-dev zlib1g-dev wget https://www.haproxy.org/download/1.8/src/haproxy-1.8.13.tar.gz tar -xzf haproxy-1.8.13.tar.gz cd haproxy-1.8.13/ make TARGET=linux2628 CPU=native USE_PCRE2=1 USE_PCRE2_JIT=1 USE_OPENSSL=1 SSL_LIB=/opt/openssl-1.1.1/lib SSL_INC=/opt/openssl-1.1.1/include USE_ZLIB=1 sudo make install # Edit the haproxy.service unit file and ensure you have [Service] Environment=LD_LIBRARY_PATH=/opt/openssl-1.1.1/lib/ Modify the HAProxy configuration Add the following to the HAProxy config (Note the ssl-default-bind-ciphers and ssl-default-bind-options lines), updating any paths as required.\nIf you only want TLSv1.3 with no fallback to TLSv1.2 then set ssl-default-bind-options to force-tlsv13\nglobal log /dev/log local0 chroot /usr/local/var/lib/haproxy user haproxy group haproxy maxconn 4000 pidfile /usr/local/var/run/haproxy.pid tune.ssl.default-dh-param 2048 ssl-default-bind-ciphers TLS13-AES-256-GCM-SHA384:TLS13-AES-128-GCM-SHA256:TLS13-CHACHA20-POLY1305-SHA256:EECDH+AESGCM:EECDH+CHACHA20 ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 # Default SSL material locations ca-base /etc/ssl/certs crt-base /etc/ssl/private defaults balance roundrobin timeout http-request 10s timeout queue 1m timeout connect 10s timeout client 1m timeout server 1m timeout check 10s listen dns bind :::853 v4v6 tfo ssl crt /etc/certs/keycert.pem mode tcp server server1 127.0.0.1:9999 Note the keycert.pem file is the concatenation of the certificate chain and key into one file which is what HAProxy requires.\nCreate required paths The above configuration sets HAProxy to run chroot in a directory /usr/local/var/lib/haproxy. It\u0026rsquo;s necessary to create this directory. OpenSSL also needs access to /dev/urandom and /dev/random in the chroot.\n\u0026gt; mkdir -p /usr/local/var/lib/haproxy/dev \u0026gt; cd /usr/local/var/lib/haproxy/dev \u0026gt; mknod urandom c 1 9 \u0026gt; mknod random c 1 8 "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/using_unbound/",
	"title": "Using Unbound",
	"tags": [],
	"description": "",
	"content": " Use at least version 1.5.5 of Unbound if you want to configure your server with a certificate (as support for intermediate certificates was introduced in this version).\nVersion 1.6.7 or later is recommended.\n Config file An example configuration file for Unbound that runs DNS-over-TLS on port 853 is below.\nserver: directory: \u0026#34;/etc/unbound\u0026#34; username: unbound chroot: \u0026#34;/etc/unbound\u0026#34; # logfile: \u0026#34;/etc/unbound/unbound.log\u0026#34; #uncomment to use logfile. pidfile: \u0026#34;/etc/unbound/unbound.pid\u0026#34; # verbosity: 1 # uncomment and increase to get more logging. # listen on all interfaces on port 853, answer queries from the local subnet. interface: 0.0.0.0@853 interface: ::0@853 tls-service-key: \u0026#34;\u0026lt;path_to_private_key\u0026gt;\u0026#34; tls-service-pem: \u0026#34;\u0026lt;path_to_certifcate_file\u0026gt;\u0026#34; tls-port: 853 incoming-num-tcp: 1000 # Number of simultaneous incoming TCP connections per thread to allow # Listen on UDP but still issues queries upstream over UDP. # Only available in 1.6.7 and later do-udp: no udp-upstream-without-downstream: yes qname-minimisation: yes # Enable QNAME minimisation to increase client privacy  Depending on how your certificate is issued you may to add the intermediate certificate to your certificate file for clients to be able to validate. For example, if you use Let\u0026rsquo;s encrypt to create your certificate you will need to add the intermediate certificate (found in the /etc/letsencrypt/certs/000\u0026lt;N\u0026gt;_chain.pem file) to the cert file.\n If you are using a version earlier than 1.6.7 then Unbound listens on UDP on port 853 with the above configuration. If want to disable UDP both upstream and downstream then use do_udp: no however this means all queries authoritative resolvers use TCP which may lead to resolution failures.\n Also in older versions of unbound the tls-* parameters where called ssl-*\nDocker Image A docker image kindly provided by Lard de Bruin is also available.\n"
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/installation/linux_from_source/",
	"title": "Linux From Source",
	"tags": [],
	"description": "",
	"content": " Build options Dependencies Download the getdns source Build the code Configuration Run Stubby from the command line    Logging     Test Stubby Modify your upstream resolvers    Build options The Stubby code can be built either\n as a submodule of getdns (see below) or  standalone with libgetdns as a dependancy. Instructions for this are in the Stubby github repo https://github.com/getdnsapi/stubby  Dependencies For the most minimal Stubby build, the dependencies are\n  libssl and libcrypto from the OpenSSL Project. Version 1.0.2 of OpenSSL or later is required.\n  libyaml\n  If you intend to install the built libgetdns as system-wide component then Unbound is also a dependancy and the --enable-stub-only flag should be omitted below! See getdns README.\nDownload the getdns source Either clone the code:\n\u0026gt; git clone https://github.com/getdnsapi/getdns.git \u0026gt; cd getdns \u0026gt; git checkout master to use the very latest stable version of getdns, or grab a release tarball from this page: Latest getdns releases. Build the code \u0026gt; git submodule update --init \u0026gt; libtoolize -ci \u0026gt; autoreconf -fi \u0026gt; mkdir build \u0026gt; cd build \u0026gt; ../configure --prefix=\u0026lt;install_location\u0026gt; --without-libidn --without-libidn2 --enable-stub-only --with-ssl=\u0026lt;openssl_location\u0026gt; --with-stubby \u0026gt; make \u0026gt; sudo make install NOTE: Only use the --enable-stub-only flag with configure IF you want remove the dependancy on libunbound for getdns for some reason (Stubby works fine when getdns is built like this but beware this limits the functions of the getdns library as a generic system component and should be used with care).\nLogging/debugging\n --enable-debug-stub If you do want to see very detailed debug information as messages are processed (including connection statistics) then add the --enable-debug-stub option to the configure line above.  Configuration It is recommended to use the default configuration file provided which will use \u0026lsquo;Strict\u0026rsquo; privacy mode and spread the DNS queries among several of the current DNS Privacy test servers. Note that this file contains both IPv4 and IPv6 addresses. From 1.2.0 it is installed in /usr/local/etc/stubby/stubby.yml. For earlier versions a JSON like format was used - this is still supported but the file name must be specified on the command line using the -C flag. In versions prior to 1.1.3 the file was not installed automatically but can be manually copied to a convenient location by simply running something like:\n\u0026gt; sudo cp ../src/tools/stubby.yml /etc/stubby.yml More information on how to customise the configuration can be found here.\nRun Stubby from the command line Simply invoke Stubby on the command line.\n By default it runs in the foreground, the -g flag runs it in the background. The pid file is in /usr/local/var/run/stubby.pid by default or can the piddir can be specified on the configure using an configure option.)  \u0026gt; sudo stubby -l Logging The logging currently simply writes to stderr. In releases 1.2 and later runtime logging is controlled using the -l (enable full logging) and -v (choose logging level) flags.\n If you built with stub logging enabled (using the \u0026ndash;enable-stub-debug flag) but want to hide it use: 2\u0026gt;\u0026amp;1 \u0026gt;/dev/null | grep 'STUBBY'  Stubby can also be run as a service - how to do this will depend on what distro you are using.\n Test Stubby A quick test can be done by using dig (or your favourite DNS tool) on the loopback address\n\u0026gt; dig @127.0.0.1 www.example.com Modify your upstream resolvers Once this change is made your DNS queries will be re-directed to Stubby and sent over TLS! (You may need to restart some applications to have them pick up the network settings).\n For Stubby to re-send outgoing DNS queries over TLS the recursive resolvers configured on your machine must be changed to send all the local queries to the loopback interface on which Stubby is listening. It might be useful to note your existing default nameservers before making this change!\n  On older systems just edit the /etc/resolv.conf file or on more modern systems update the DNS settings for your distribution e.g. systemd\n  Comment out the existing nameserver entries\n  Add the following (only add the IPv4 address if you don\u0026rsquo;t have IPv6)\nnameserver 127.0.0.1 nameserver ::1   You most likely need to restart the DNS resolver service\n  You can monitor the traffic using Wireshark watching on port 853.\nIf you encounter problems reverse this change to restore your default settings (no DNS Privacy).\n"
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/about_stubby/",
	"title": "About Stubby",
	"tags": [],
	"description": "",
	"content": "\u0026lsquo;Stubby\u0026rsquo; is an application that acts as a local DNS Privacy stub resolver (using DNS-over-TLS). Stubby encrypts DNS queries sent from a client machine (desktop or laptop) to a DNS Privacy resolver increasing end user privacy.\nStubby is developed by the getdns project, has it\u0026rsquo;s own github repo and issue tracker but dnsprivacy.org currently hosts the online documentation for Stubby .\nFAQ   What is Stubby?\nANSWER: Stubby runs as a daemon on the local machine sending DNS queries to resolvers over an encrypted TLS connections providing increased privacy for the user. Passive observers on the network can therefore no longer see the DNS queries made by the client, which are normally send in clear text on the wire using UDP. DNS-over-TLS was recently standardised by the IETF in RFC7858. The DNS server the client connects to can also be authenticated if the correct information is configured in Stubby - this prevents active attacks where a client might be directed to a server controlled by an attacker.\n  How does it relate to getdns?\nANSWER: Stubby is developed by the getdns team. libgetdns is a dependancy for Stubby, the getdns library provides all the core functionality for DNS resolution done by Stubby so it is important to build against the latest version of getdns.   How is it different to DNSCrypt?\nANSWER: DNSCrypt is a method of authenticating communications between a DNS client and a DNS resolver. It prevents DNS spoofing. It uses cryptographic signatures to verify that responses originate from the chosen DNS resolver and haven\u0026rsquo;t been tampered with (the messages are still sent over UDP). As a side effect it provides increased privacy because the DNS message content is encrypted. It is an open specification but it has not been standardized by the IETF. Stubby uses only DNS-over-TLS to provide privacy, it does not implement DNSCrypt.\n  Does Stubby offer both \u0026lsquo;Strict\u0026rsquo; and \u0026lsquo;Opportunistic\u0026rsquo; usage profiles as described in RFC8310? What are the differences?\nANSWER: Yes, Stubby can work in both modes. In \u0026lsquo;Strict\u0026rsquo; mode authentication information (e.g. an authentication name or a SPKI pinset) MUST be provided for each nameserver and DNS queries will only be sent if Stubby can authenticate the namerserver using this information. This guarantees against a trivial MitM attack on the connection to the DNS Privacy nameserver. In \u0026lsquo;Opportunistic\u0026rsquo; mode Stubby will try to authenticate the nameserver if possible, but will settle for using an unauthenticated, encrypted connection. Or if none of the configured servers support DNS-over-TLS is will fallback to using clear text over UDP or TCP in order to provide DNS service. This is a less secure mode than \u0026lsquo;Strict\u0026rsquo; but means that Stubby can still resolver your DNS queries even if a DNS Privacy server is not available. See Configuring Stubby for more information.\n  What is the difference between using Stubby and using Unbound as a local forwarding resolver?\nANSWER: Unbound can be configured as a local forwarder using DNS-over-TLS to forward queries. However at the moment Unbound does not have all the TCP/TLC features that Stubby has for example, it cannot support \u0026lsquo;Strict\u0026rsquo; mode, it cannot pad queries to hide query size and it opens a separate connection for every DNS query (Stubby will re-use connections). However, Unbound is a mature and stable daemon and many people already use it as a local resolver. While there were some early issues the last few releases of Stubby have focussed on stability and security and have significantly improved the usability of Stubby. We also have plans to add a small cache to stubby! Note that some users choose to use the two together, unbound for caching and stubby for upstream TLS.\n  What TLS version and Cipher suites does Stubby use?\nANSWER: Stubby supports TLS v1.2. In \u0026lsquo;Strict\u0026rsquo; mode Stubby is limited to using the 4 Cipher Suites recommended in RFC7525, in Opportunistic mode is uses the default OpenSSL Cipher suites.\nThe 1.3.0 release of getdns will support TLS 1.3 when using OpenSSL 1.1.1 or later, so build Stubby against that if you want to try it out! It also has a configuration option to allow the user to specify the Cipher Suites to be used.\n  Does Stubby support IPv6?\nANSWER: Yes - it fully supports IPv6.\n  Does Stubby support DNSSEC?\nANSWER: Yes, stubby can be configured to be a local validating stub. Note that this can currently add an overhead to DNS resolution because a greater number of queries are required (this will be mitigated in a future release when a small cache will be added to stubby).\n  What version of OpenSSL does Stubby require?\nANSWER: Stubby requires OpenSSL 1.0.2 or later for all functionality to be available.\n  How does Stubby decide which upstreams to use when some are failing?\nANSWER: In the 1.3 release of getdns a number of criteria are used to determine when to \u0026lsquo;back-off\u0026rsquo; from an upstream server e.g. how many times a connection to the server is tried but failed, if the server can be authenticated successfully (in Strict mode), how many times the server closes down the TLS connect before stubby does, how many timeouts are received from the server. When a server fails it is retried at increasing intervals up to a period of one hour. Some of these parameters are configurable.   What if I don\u0026rsquo;t have a local certificate store to validate certificates (e.g. I\u0026rsquo;m running on a router with minimal TLS library install)?\nANSWER: Since the 1.4 release of getdns validation of self-signed certificates can be done using just a SPKI pinset. See Issue#46 and PR#371.\n  Contributors Many people have contributed to developing and testing Stubby including (but not limited to!):\n Allison Mankin  Willem Toroop  Sara Dickinson Joel Purra Melinda Shore The rest of the getdns team! Mohit Batra Georgina Hawes Molly Carton Jim Hague John Dickinson  "
},
{
	"uri": "http://dnsprivacy.org/test_servers/map_of_test_server_locations/",
	"title": "Map of test server locations",
	"tags": [],
	"description": "",
	"content": "The map below is an static image of the current DNS-over-TLS test server locations. We don\u0026rsquo;t show Quad9 on here because they run an anycast service (see their website for details).\nThe icons reflect the software being used:\n Green pin: Unbound Pink pin: Knot Resolver Blue pin: TLS proxy in front of a nameserver Blue flag: Unknown  "
},
{
	"uri": "http://dnsprivacy.org/the_problem/",
	"title": "The Problem",
	"tags": [],
	"description": "",
	"content": "Why is DNS a privacy concern?  DNS Queries DNS Zone Transfers Overview of solutions  Client (stub) to recursive resolver Recursive discovery Recursive resolver to Authoritative server Zone transfer A note on SNI      The DNS is one of the most significant leaks of data about an individuals and an organisations activity on the Internet.\n Some of the issues in simple terms:\nDNS Queries   Almost every activity on the Internet starts with a DNS query (and often several). A key function of the DNS is to map human readable names (e.g. example.com) to IP addresses that computers need in order to connect to each other.   Those queries can reveal not only what websites an individual visits but also meta data about other services such as the domains of email contacts or chat services.   Whilst the data in the DNS is public, individual transactions made by an end user should not be public.\n  However DNS queries are sent in clear text (using UDP or TCP) which means passive eavesdroppers can observe all the DNS lookups performed.\n  The DNS is a globally distributed system that crosses international boundaries and often uses servers in many different countries in order to provide resilience.\n  It is well known that the NSA used the MORECOWBELL and QUANTUMDNS tools to perform covert monitoring, mass surveillance and hijacking of DNS traffic.\n  Some ISPs log DNS queries at the resolver and share this information with third-parties in ways not known or obvious to end users.   Some ISPs embed user information (e.g. a user id or MAC address) within DNS queries that go to the ISPs resolver in order to provide services such as Parental Filtering. This allows for fingerprinting of individual users.\n  Some CDNs embed user information (client subnets) in queries from resolvers to authoritative servers (to geo-locate end users). This allows for correlations of queries to particular subnets.\n  Note that even when using a VPN some VPNs will still leak your DNS queries by sending them unencrypted to your ISP. Use the nice tool from anonymyster.com to check is this is happening with your VPN!\n  An overview of the problems is given in this Tutorial: DNS Privacy Tutorial.\nFor an expert review of this topic recommended reading is DNS Privacy Considerations.\nDNS Zone Transfers DNS zone transfers are transmitted in clear text, which gives attackers the opportunity to collect the content of a zone by eavesdropping on network connections. The contents of the zone could include information such as names of persons used in names of hosts. Best practice is not to use personal information for domain names, but many such domain names exist. The contents of the zone could also include references to locations that allow inference about location information of the individuals associated with the zone\u0026rsquo;s organization. It could also include references to other organizations. Overview of solutions For a full discussion of the options available please see DNS Privacy - The Solutions.\nClient (stub) to recursive resolver The two most widely deployed solutions for stub to recursive resolution are DNS-over-TLS and DNS-over-HTTP; they both encrypt DNS data and prevent passive surveillance of network data revealing users' DNS queries. They can both allow users to validate the server they choose for their DNS service to make sure they are using a provider who has a good privacy policy for how they handle user data. But they do have some different protocol properties and in practice are being deployed in somewhat different ways at the moment. Neither of these are trivial changes in the way DNS works and encryption of all DNS queries by default will not happen overnight. A Best Current Practice document describing Recommendations for DNS Privacy Service Operators has been approved for publication. This covers both downstream and upstream protocol issues and data handling recommendations for Operators of recursive resolvers that offer an encrypted protocol. See DNS Privacy Clients, DNS Privacy Implementation Status, DNS Privacy Public Resolvers, DNS Privacy Test Servers for more information.\nRecursive discovery One significant challenge is around discovery of which transports a particular resolver supports and securely acquiring information required to connect and validate a particular resolver. The ADD working group in the IETF is currently working on a range of proposals around this issue\nRecursive resolver to Authoritative server The DPRIVE working group at the IETF has been working on requirements and solutions for that, if you are interested see the DPRIVE mailing list. Zone transfer A draft in the DPRIVE working group is proposing encrypting zone transfers using TLS: Zone Transfer over TLS (XoT)\nA note on SNI Unfortunately the Server Name Indicator header in HTTPS messages also reveals the name of the website contacted by the user so provides a similar leakage channel for web traffic as the DNS queries. However there is work underway in the TLS working group at IETF to encrypt the Client Hello including the SNI: TLS Encrypted Client Hello\n"
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/best_current_practices/data_minimisation_of_dns_traffic/",
	"title": "Data minimisation of DNS traffic",
	"tags": [],
	"description": "",
	"content": " Terminology History Notable pseudonymising techniques  Google Analytics non-prefix filtering dnswasher Prefix-preserving map Cryptographic Prefix-Preserving Pseudonymisation Top-hash Subtree-replicated Anonymisation ipcipher Bloom filters   Other data minimisation considerations References    The DNS Privacy solutions presented here ensure that DNS queries made by an individual end user can\u0026rsquo;t be observed by eavesdroppers as they pass across the Internet. Only the operators of DNS privacy servers have access to the details of the queries. For operational reasons such as monitoring server performance or detecting and mitigating attacks operators need to keep logs of the DNS queries they see; in some circumstances they may need to share those logs with other operators. To preserve end user privacy, as RFC697317observes it is important that the data in these logs limits the identifiability of end users; more generally, that the data in the logs is kept to the minimum required for purpose, a process the RFC terms data minimisation.\nData minimising a trace or logs of network traffic therefore includes ensuring the recorded data does not contain privacy-sensitive information. This is typically personal data, or data that can be used to link a record to an individual, but may also include revealing other confidential information, for example on the structure of an internal corporate network. In the case of identifiability, this means that if individual user identifiers cannot be omitted altogether, pseudonyms should be used instead.\nThe problem of effectively ensuring that DNS query logs do not contain privacy-sensitive information is not one that currently has a generally agreed solution. This page gives an overview of current approaches to identifier pseudonymisation. As RFC762616makes clear, the big privacy risk in DNS is connecting DNS queries to an individual, so at present the main focus is on pseudonymising client IP addresses (though, of course, the MAC address, VLAN identifier and ARP data may be useful in particularly localised environments).\nTerminology Pseudonymising a dataset is generally done using either anonymisation or pseudonomysation. This discussion uses the definitions from RFC697317 Section 3, with additional observations from van Dijkhuizen et al.1  Anonymisation. To enable anonymity of an individual, there must exist a set of individuals that appear to have the same attribute(s) as the individual. To the attacker or the observer, these individuals must appear indistinguishable from each other.\n  Pseudonymisation. The true identity is deterministically replaced with an alternate identity (a pseudonym). When the pseudonymisation schema is known, the process can be reversed, so the original identity becomes known again.\n  In practice there is a fine line between the two; for example, how to categorise a deterministic algorithm for pseudonymisation of IP addresses that produces a group of pseudonyms for a single given address?\nHistory Awareness of the need for pseudonymising data, so that significant corpuses of captures could be shared for research purposes, sparked research into particularly IP address pseudonymisation in the late 1990s/early 2000s. Several techniques reflecting different requirements for the pseudonymised addresses and different performance/resource tradeoffs emerged over the course of the decade. Developments over the last decade have been both a blessing and a curse; the large increase in size between an IPv4 and an IPv6 address, for example, renders some techniques (in particular TSA) impractical, but also makes available a much larger amount of input entropy. Pseudonymised IPv6 addresses are therefore much better placed to resist brute force re-identification attacks than IPv4 addresses. Several authors (e.g. Brenker \u0026amp; Arnes11) have observed that today any IPv4 address pseudonymisation is vulnerable to a brute force attack, particularly if an attacker is capable of ensuring packets are captured by the target and the attacker can send forged traffic with arbitrary source and destination addresses to the target thus permitting an attack along the lines of a cryptographic chosen plaintext attack.\nCategorising techniques for anonymising logs\nThe ways in which data may be pseudonymised can be classified into some broad categories.\n Replacement. A one-to-one replacement of a field to a new value of the same type, for example using a regular expression. Filtering. Removing (and thus truncating) or replacing data in a field. Field data can be overwritten, often with zeros, either partially (grey marking) or completely (black marking). Generalisation. Data is replaced by more general data with reduced specificity. One example would be to replace all TCP/UDP port numbers with one of two fixed values indicating whether the original port was ephemeral (\u0026gt;=1024) or non-ephemeral (\u0026gt;1024). Another example, precision degredation, reduces the accuracy of e.g. a numeric value or a timestamp. Enumeration. With data from a well-ordered set, replace the first data item data using a random initial value and then allocate ordered values for subsequent data items. When used with timestamp data, this preserves ordering but loses precision and distance. Reordering/shuffling. Preserving the original data, but rearranging its order, often in a random manner. Random substitution. As replacement, but using randomly generated replacement values. Cryptographic permutation. Using a permutation function, such as a hash function or cryptographic block cipher, to generate a replacement de-identified value.  This list is derived from RFC6235 and van Dijkhuizen et al.1A pseudonymising technique may also have properties desirable in a particular application:\n Format-preserving encryption. Normally when encrypting, the original data length and patterns in the data should be hidden from an attacker. Some applications of data minimisation, such as network capture pseudonymisation, require that the pseudonymised data is of the same form as the original data, to allow the data to be parsed in the same way as the original. Prefix preservation. Values such as IP addresses and MAC addresses contain prefix information that can be valuable in analysis, e.g. manufacturer ID in MAC addresses, subnet in IP addresses. Prefix preservation ensures that prefixes are pseudonymised consistently; e.g. if two IP addresses are from the same subnet, prefix preserving pseudonymising will ensure that their pseudonymised counterparts will also share a subnet. Prefix preservation may be fixed (the length of the prefix to be preserved must be set by the user in advance), or general (if two addresses share any length of prefix bits in common, their pseudonymised counterparts will also have the same length of prefix bits in common).  Notable pseudonymising techniques Google Analytics non-prefix filtering Since May 2010, Google Analytics has provided a facility that allows website owners to request that all their users IP addresses are pseudonymised within Google Analytics processing. This very basic pseudonymisation simply sets to zero the least significant 8 bits of IPv4 addresses, and the least significant 80 bits of IPv6 addresses. The level of pseudonymisation this produces is perhaps questionable. There are some analysis results13which suggest that the impact of this on reducing the accuracy of determining the user\u0026rsquo;s location from their IP address is less than might be hoped; the average discrepancy in identification of the user city for UK users is no more than 17%. Anonymisation: Format-preserving, Filtering (grey marking).\ndnswasher Since 2006, PowerDNS have included a data minimisation tool dnswasher14with their PowerDNS product. This is a PCAP filter that performs a one-to-one mapping of end user IP addresses with an pseudonymised address. A table of user IP addresses and their de-identified counterparts is kept; the first IPv4 user addresses is translated to 0.0.0.1, the second to 0.0.0.2 and so on. The de-identified address therefore depends on the order that addresses arrive in the input, and running over a large amount of data the address translation tables can grow to a significant size. Anonymisation: Format-preserving, Enumeration.\nPrefix-preserving map Used in TCPdpriv2, this algorithm stores a set of original and pseudonymised IP address pairs. When a new IP address arrives, it is compared with previous addresses to determine the longest prefix match. The new address is pseudonymised by using the same prefix, with the remainder of the address pseudonymised with a random value. The use of a random value means that TCPdrpiv is not deterministic; different pseudonymised values will be generated on each run. The need to store previous addresses means that TCPdpriv has significant and unbounded memory requirements, and because of the need to allocated pseudonymised addresses sequentially cannot be used in parallel processing. Anonymisation: Format-preserving, prefix preservation (general), replacement, random substitution.\nCryptographic Prefix-Preserving Pseudonymisation Cryptographic prefix-preserving pseudonymisation was originally proposed as an improvement to the prefix-preserving map implemented in TCPdpriv, described in Xu et al3and implemented in the Crypto-PAn tool4. Crypto-PAn is now frequently used as an acronym for the algorithm. Initially it was described for IPv4 addresses only; extension for IPv6 addresses was proposed in Harvan \u0026amp; Schönwälder5and implemented in snmpdump6. This uses a cryptographic algorithm rather than a random value, and thus pseudonymity is determined uniquely by the encryption key, and is deterministic. It requires a separate AES encryption for each output bit, so has a non-trivial calculation overhead. This can be mitigated to some extent (for IPv4, at least) by pre-calculating results for some number of prefix bits. Pseudonymisation: Format-preserving, prefix preservation (general), cryptographic permutation.\nTop-hash Subtree-replicated Anonymisation Proposed in Ramaswamy \u0026amp; Wolf7, Top-hash Subtree-replicated Anonymisation (TSA) originated in response to the requirement for faster processing than Crypto-PAn. It used hashing for the most significant byte of an IPv4 address, and a pre-calculated binary tree structure for the remainder of the address. To save memory space, replication is used within the tree structure, reducing the size of the pre-calculated structures to a few Mb for IPv4 addresses. Address pseudonymisation is done via hash and table lookup, and so requires minimal computation. However, due to the much increased address space for IPv6, TSA is not memory efficient for IPv6. Pseudonymisation: Format-preserving, prefix preservation (general), cryptographic permutation.\nipcipher A recently-released proposal from PowerDNS8, ipcipher is a simple pseudonymisation technique for IPv4 and IPv6 addresses. IPv6 addresses are encrypted directly with AES-128 using a key (which may be derived from a passphrase). IPv4 addresses are similarly encrypted, but using a recently proposed (and confusingly closely named) encryption ipcypher9suitable for 32bit block lengths. However, the author of ipcrypt has since indicated10that it has low security, and further analysis has revealed it is vulnerable to attack. At the time of writing, progress on ipcipher appears to have stalled. Pseudonymisation: Format-preserving, cryptographic permutation.\nBloom filters van Rijswijk-Deij et al15have recently described work using Bloom filters to categorise query traffic and record the traffic as the state of multiple filters. By this means, it is possible to determine with a high probability if, for example, a particular query was made, but the set of queries made cannot be recovered from the filter. Similarly, by mixing queries from a sufficient number of users in a single filter, it becomes practically impossible to determine if a particular user performed a particular query. Large numbers of queries can be tracked in a memory-efficient way. As filter status is stored, this approach cannot be used to regenerate traffic, and so cannot be used with tools used to process live traffic. Anonymisation: Generalisation.\nOther data minimisation considerations (A placeholder list).\nTTL/Hoplimit (if present) can be used to fingerprint client OS.\nMAC address/VLAN.\nDNS ID lack of randomisation ditto.\nAll queries down a single TCP stream must come from the same host.\nReferences  Niels van Dijkhuizen and Jeroen van der Ham. 2018. A Survey of Network Traffic Anonymisation Techniques and Implementations. ACM Comput. Surv. 51, 3, Article 52 (May 2018), 27 pages. DOI: https://doi.org/10.1145/3182660 G. Minshall, Ipsilon Networks, Inc., TCPDRIV, Oct 2005. http://ita.ee.lbl.gov/html/contrib/tcpdpriv.html  J. Xu, J. Fan, M. Ammar, and S. B. Moon, Prefix-Preserving IP Address Anonymization: Measurement-Based Security Evaluation and a New Cryptography-Based Scheme, Proceedings of the IEEE International Conference on Network Protocols, 2002. DOI: https://doi.org/10.1016/j.comnet.2004.03.033. http://an.kaist.ac.kr/~sbmoon/paper/intl-journal/2004-cn-anon.pdf  CryptoPan page at Georgia Tech. https://www.cc.gatech.edu/computing/Telecomm/projects/cryptopan/  M. Harvan and J. Schönwälder. Prefix- and lexicographical-order-preserving IP address anonymization. In Proceedings of the 10th IEEE/IFIP Network Operations and Management Symposium 2006 (NOMS’06). 519–526. DOI: http://dx.doi.org/10.1109/NOMS.2006.1687580. http://mharvan.net/talks/noms-ip_anon.pdf  J. Schönwälder, snmpdump, 2004, https://github.com/schoenw/snmpdump R. Ramaswamy and T. Wolf, \u0026ldquo;High-Speed Prefix-Preserving IP Address Anonymization for Passive Measurement Systems,\u0026rdquo; in IEEE/ACM Transactions on Networking, vol. 15, no. 1, pp. 26-39, Feb. 2007. DOI: https://doi.org/10.1109/TNET.2006.890128. http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.84.7417\u0026amp;rep=rep1\u0026amp;type=pdf  A. Hubert, PowerDNS, Feb 2018. https://github.com/PowerDNS/ipcipher. See also On IP address encryption: security analysis with respect for privacy, Medium.com, May 2018 by the same author.  J.-P. Aumasson, Mar. 2015, https://github.com/veorq/ipcrypt  J.-P. Aumasson, Re: [Cfrg] Analysis of ipcrypt?, Feb. 2018. https://www.ietf.org/mail-archive/web/cfrg/current/msg09494.html. See also J. Donenfeld, Feb. 2018. https://www.ietf.org/mail-archive/web/cfrg/current/msg09495.html T. Brekne and A. Årnes. “Circumventing IP-address pseudonymization.” Communications and Computer Networks (2005). https://pdfs.semanticscholar.org/7b34/12c951cebe71cd2cddac5fda164fb2138a44.pdf  IP Anonymization in Analytics, https://support.google.com/analytics/answer/2763052?hl=en  Huiyan, Anonymize IP Geolocation Accuracy Impact Assessment (blog posting), May 2017.https://www.conversionworks.co.uk/blog/2017/05/19/anonymize-ip-geo-impact-test/  dnswasher - A PowerDNS nameserver debugging tool, 2006  R. van Rijswijk-Deij, M. Bomhoff and R. Dolmans, Let a Thousand Filters Bloom: DNS-Based Threat Monitoring That Respects User Privacy, TNC18, June 2018, https://tnc18.geant.org/core/presentation/127  S. Bortzmeyer, DNS Privacy Considerations, RFC7626, https://datatracker.ietf.org/doc/rfc7626/  A. Cooper, H. Tschofenig, B. Aboba, J. Peterson, J. Morris, M. Hansen and R. Smith, Privacy Considerations for Internet Protocols, RFC6973, https://datatracker.ietf.org/doc/rfc6973/  "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/lets_encrypt_certificate_renewal/automated_certificate_management_2/",
	"title": "Certificate management method 2",
	"tags": [],
	"description": "",
	"content": "This page is assumes using OpenDNSSEC to sign zones. Thanks to Willem Toorop and Ralph Dolmans at NLnet Labs for developing this automated solution!\n  An example configuration file is:\nCA=\u0026#34;https://acme-v01.api.letsencrypt.org/directory\u0026#34; #CA=\u0026#34;https://acme-staging.api.letsencrypt.org/directory\u0026#34; LICENSE=\u0026#34;https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf\u0026#34; CERTDIR=/usr/local/etc/dehydrated/certs CHALLENGETYPE=\u0026#34;dns-01\u0026#34; HOOK=/usr/local/etc/dehydrated/dnshook.sh PRIVATE_KEY_RENEW=\u0026#34;no\u0026#34; PRIVATE_KEY_ROLLOVER=\u0026#34;no\u0026#34; CONTACT_EMAIL=alice@example.com   Private keys are then stored in\n/usr/local/etc/dehydrated/certs/\u0026lt;domain\u0026gt;/privkey.pem   The SubjectAltNames are then enumerated in the file\n/usr/local/etc/dehydrated/domains.txt Add one line in this for each \u0026lsquo;group\u0026rsquo; of names that should share a certificate e.g\nexample.com www.example.com example.org example1.com www.example1.com example1.net   Then the challenge record needs to be provisioned in the corresponding zone in a record of the form\n_acme-challenge.\u0026lt;domain name\u0026gt;   If you have many zones it can be helpful to use CNAMES to redirect to a single zone that can hold the acme_challenge records e.g. \u0026lt;domain\u0026gt;.acme.example.com\n  The domain acme.example.com is then hosted only on the server that also runs dehydrated.    A script can then be used to deploy and clean the challenge in this domain. An example script is included below\n#!/bin/sh zonefile=/usr/local/etc/dehydrated/acmezone deploy_challenge() { local DOMAIN=\u0026#34;${1}\u0026#34; RDATA=\u0026#34;${3}\u0026#34; echo \u0026#34;$DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34;\u0026#34; \u0026gt;\u0026gt; $zonefile echo \u0026#34;$DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34;\u0026#34; ldns-read-zone $zonefile \u0026gt; /dev/null if [ $? -eq 0 ]; then cp $zonefile ~/unsigned/acme.example.com ods-signer sign acme.example.com sleep .5 fi } clean_challenge() { local DOMAIN=\u0026#34;${1}\u0026#34; RDATA=\u0026#34;${3}\u0026#34; sed -i \u0026#34;.old\u0026#34; \u0026#34;/$DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34;/d\u0026#34; $zonefile ldns-read-zone $zonefile \u0026gt; /dev/null if [ $? -eq 0 ]; then cp $zonefile ~/unsigned/acme.example.com ods-signer sign acme.example.com fi } deploy_cert() { local DOMAIN=\u0026#34;${1}\u0026#34; KEYFILE=\u0026#34;${2}\u0026#34; CERTFILE=\u0026#34;${3}\u0026#34; FULLCHAINFILE=\u0026#34;${4}\u0026#34; CHAINFILE=\u0026#34;${5}\u0026#34; TIMESTAMP=\u0026#34;${6}\u0026#34; # nothing yet.. } unchanged_cert() { local DOMAIN=\u0026#34;${1}\u0026#34; KEYFILE=\u0026#34;${2}\u0026#34; CERTFILE=\u0026#34;${3}\u0026#34; FULLCHAINFILE=\u0026#34;${4}\u0026#34; CHAINFILE=\u0026#34;${5}\u0026#34; # nothing yet.. } HANDLER=\u0026#34;$1\u0026#34;; shift \u0026#34;$HANDLER\u0026#34; \u0026#34;$@\u0026#34;   "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/using_knot_resolver/",
	"title": "Using Knot Resolver",
	"tags": [],
	"description": "",
	"content": "Config file An example configuration file for Knot that runs DNS-over-TLS on port 853 is below.\n-- Default empty Knot DNS Resolver configuration in -*- lua -*- -- Bind ports as privileged user (root) -- -- net = { \u0026#39;127.0.0.1\u0026#39;, \u0026#39;::1\u0026#39;, net.ens160 } net.tls(\u0026#39;/etc/sinodun/certs/fullchain.pem\u0026#39;,\u0026#39;/etc/sinodun/certs/privkey.pem\u0026#39;) net.listen(\u0026#39;::\u0026#39;, 853) net.listen(\u0026#39;145.100.185.17\u0026#39;, 853) -- Switch to unprivileged user -- user(\u0026#39;knot-resolver\u0026#39;,\u0026#39;knot-resolver\u0026#39;) -- Unprivileged -- cache.size = 100*MB -- verbose(true)  If you are using systemd with socket-based activation you need to remove the net.listen lines above and instead run  systemctl edit kresd-tls.socket. and put [Socket]. ListenStream=145.100.185.17:853 ListenStream=[2001:610:1:40ba:145:100:185:17]:853 in the override file.\n  If you are using the packages from home:CZ-NIC:knot-resolver-latest you need to enable the service using\nsystemctl enable \u0026ndash;now kresd@1.service\n  See man kresd.systemd for more info.\nDepending on how your certificate is issued you may to add the intermediate certificate to your certificate file for clients to be able to validate. For example, if you use Let\u0026rsquo;s encrypt to create your certificate you will need to add the intermediate certificate (found in the /etc/letsencrypt/certs/000``\u0026lt;N\u0026gt;_chain.pem file) to the cert file.\n "
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/installation/running_as_a_service_on_nix/",
	"title": "Running as a service on *nix",
	"tags": [],
	"description": "",
	"content": " systemd upstart rc    systemd There is basic support for using stubby with systemd. See the systemd directory. Also see the discussion on this issue.\nupstart We have a contributed upstart script here.\nrc There is an issue open requesting an rc.d script.\n "
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/configuring_stubby/",
	"title": "Configuring Stubby",
	"tags": [],
	"description": "",
	"content": " Create Custom Configuration File  DNSSEC  Storage of Zero-config Trust anchor     Opportunistic DoT to your local resolver Runtime logging    It is recommended to use the default configuration file provided which will use \u0026lsquo;Strict\u0026rsquo; privacy mode and spread the DNS queries among several of the current DNS Privacy test servers. Note that this file contains both IPv4 and IPv6 addresses.\nNote also that this file only enables a small subset of the available servers by default. Users can choose to use additional servers by uncommenting the relevant sections in the file. See DNS Privacy Test Servers for details of the available servers.\n Create Custom Configuration File Alternatively the configuration file location can be specified on the command line using the -C flag. Changes to the configuration file require a restart of Stubby.\nFrom release 0.1.3 of stubby (using the 1.2 release of getdns) the configuration file format is a YAML like format, which contains detailed comments of the options. See here for an example or keep reading for a short description. To be backwards compatible a file using the YAML format must have a .yml or .yaml extension. The previously used JSON like format used internally in getdns is still supported but only when the configuration file is specified via the command line using the -C flag. This format is the same as the output returned by stubby -i. For example, this output can be used as a configuration file directly, but a less verbose form is also accepted.\n Essentially the options available are the same as the options that can be set on a getdns context.  Doxygen documentation for the context options is available here.  A detailed description of the context settings is in the API A detailed description of all the extensions than can also be used is also in the API.  To aid with creating a custom configuration file, an example is given below. The config file below will configure Stubby in the following ways:\n resolution_type: Work in stub mode only (not recursive mode) - required for Stubby operation. dns_transport_list: Use TLS only as a transport (no fallback to UDP or TCP). tls_authentication: Use Strict Privacy i.e. require a TLS connection and authentication of the upstream  If Opportunistic mode is desired, remove the tls_authentication: GETDNS_AUTHENTICATION_REQUIRED field and add additional transports to the dns_transport_list (e.g. UDP, TCP) . In Opportunistic mode authentication of the nameserver is not required and fallback to clear text transports is permitted if they are in the dns_transport_list.   tls_query_padding_blocksize: Use the EDNS0 padding option to pad DNS queries to hide their size edns_client_subnet_private: Use EDNS0 Client Subnet privacy so the client subnet is not sent to authoritative servers listen_address: have the Stubbby daemon listen on IPv4 and IPv6 on port 53 on the loopback address idle_timeout: Use an EDNS0 Keepalive idle timeout of 10s unless overridden by the server. This keeps idle TLS connections open to avoid the overhead of opening a new connection for every query. round_robin_upstreams: Round robin queries across all the configured upstream servers. Without this option Stubby will use each upstream server sequentially until it becomes unavailable and then move on to use the next. upstream_recursive_servers: Use the NLnet labs test DNS Privacy Server for outgoing queries. In Strict Privacy mode, at least one of the following is required for each nameserver:  tls_auth_name: This is the authentication domain name that will be verified against the presented certificate. tls_pubkey_pinset: The sha256 SPKI pinset for the server. This is also verified against the presented certificate.    resolution_type: GETDNS_RESOLUTION_STUB dns_transport_list: - GETDNS_TRANSPORT_TLS tls_authentication: GETDNS_AUTHENTICATION_REQUIRED tls_query_padding_blocksize: 256 edns_client_subnet_private : 1 idle_timeout: 10000 listen_addresses: - 127.0.0.1 - 0::1 round_robin_upstreams: 1 upstream_recursive_servers: - address_data: 185.49.141.38 tls_auth_name: \u0026#34;getdnsapi.net\u0026#34; tls_pubkey_pinset: digest: \u0026#34;sha256\u0026#34; value: foxZRnIh9gZpWnl+zEiKa0EJ2rdCGroMWm02gaxSc9Q= Additional privacy servers can be specified by adding more entries to the upstream_recursive_servers list above (note a separate entry must be made for the IPv4 and IPv6 addresses of a given server. More DNS Privacy test servers are listed here.\nA custom port can be specified by adding the tls_port: attribute to the upstream_recursive_server in the config file.\nA custom listen address port can be configured by using the \u0026lt;IP_address\u0026gt;@\u0026lt;port\u0026gt; syntax\nDNSSEC To enable DNSSEC validation when using Stubby add the following option to the configuration file\ndnssec_return_status: GETDNS_EXTENSION_TRUE A trust anchor is also required for DNSSEC validation. getdns version 1.2 and later include support for automatic trust anchor management - which will automatically fetch a trust anchor if none is present on the system. See \u0026lsquo;Zero configuration DNSSEC\u0026rsquo; (and below) for the specific details of key management for DNSSEC for this case. If using a version of getdns earlier than 1.2 then a trust anchor must be manually installed and managed on the system. We recommend using unbound-anchor.\nStorage of Zero-config Trust anchor When the system-level user does have a home directory, stubby will store the for Zero configuration DNSSEC dynamically acquired root trust anchor in a subdirectory called \u0026ldquo;.getdns\u0026rdquo; of that home directory (or in \u0026ldquo;%AppData%\\getdns\u0026rdquo; on Windows). If the system-level user does not have a home directory or the home directory is not writeable or readable, stubby will fallback to the current working directory.\nThis can be overruled by supplying a \u0026ldquo;appdata_dir\u0026rdquo; in the stubby.yml configuration file. When a \u0026ldquo;appdata_dir\u0026rdquo; was specified, that directory will be used for storing data related to Zero configuration DNSSEC immediately, without the other paths being tried. It is recommended for systemd setups using the provided systemd.service file(s) to have a \u0026ldquo;appdata_dir\u0026rdquo; directive set to \u0026ldquo;/var/cache/stubby\u0026rdquo; in the stubby.yml configuration file.\nNote that using DNSSEC can add a small performance overhead because it increases the number of queries required to resolve a DNS request.\nOpportunistic DoT to your local resolver Some users may want to have a configuration for Stubby that will always use the resolver from the system configuration (most likely but not always on the local network), but with encryption used where possible. This is an Opportunistic mode which does not authenticate the DoT server. To configure Stubby in this mode:\n  Set the transport list and authentication parameter in the configuration to:\ndns_transport_list: - GETDNS_TRANSPORT_TLS - GETDNS_TRANSPORT_UDP - GETDNS_TRANSPORT_TCP tls_authentication: GETDNS_AUTHENTICATION_NONE   Remove (or comment out) all the upstream_resolvers. This will cause Stubby to fallback to using the system resolvers only.\n  Note: a future version of Stubby will most likely support a mixed mode of system resolvers and configured resolvers. Runtime logging In the 0.1.2 release of stubby there is runtime logging, which can be turned on by using the \u0026lsquo;-l\u0026rsquo; flag.\nIn the 0.1.3 release the logging level is be controlled by specifying a logging level via the \u0026lsquo;-v\u0026rsquo; flag. See stubby help (\u0026lsquo;stubby -h\u0026rsquo;) for more details. "
},
{
	"uri": "http://dnsprivacy.org/test_servers/monitoring/",
	"title": "dnsprivacy Monitoring",
	"tags": [],
	"description": "",
	"content": "This service is temporarily offline\n"
},
{
	"uri": "http://dnsprivacy.org/test_servers/live_traffic_levels/",
	"title": "Live Traffic Levels",
	"tags": [],
	"description": "",
	"content": "This service is temporarily offline\n"
},
{
	"uri": "http://dnsprivacy.org/the_solutions/",
	"title": "The Solutions",
	"tags": [],
	"description": "",
	"content": "DNS Privacy Solutions  IETF Standards Track options  DNS-over-TLS (DoT) DNS-over-HTTP (DoH) DNS-over-QUIC (DoQ)   Non Standards Track options  DNS-over-DTLS DNSCrypt DNSCurve DNS-over-HTTPS      This site is mainly focussed on following the development and deployment of DNS-over-TLS (DoT) and DNS-over-HTTPS (DoH) as the leading solutions for DNS Privacy because they are the only protocols currently standardized by the IETF.\nSome history and background on other alternatives are outlined below and we intend to follow other solutions as they evolve.\nIETF Standards Track options DNS-over-TLS (DoT) RFC7858 specified DNS-over-TLS as a Standards Track protocol in May 2016 with a port assignment of 853 from IANA. There is active work in this area.\nThere are now multiple implementations (including Stubby a local DNS Privacy stub resolver) and a number of experimental and public servers deployed. DNS-over-HTTP (DoH) RFC8484 specifies DNS-over-HTTPS as a Standards Track protocol on October 2018. There are several implementations (including Firefox) and deployments. Note that with DoH it is possible to intermingle DNS and HTTP traffic on the same port 443 connection and make blocking of encrypted DNS harder. It should be noted that this RFC addresses almost purely protocol issues, there is no dynamic discovery mechanism for DoH specified yet so it cannot be done opportunistically (it must be configured).\nDNS-over-QUIC (DoQ) A draft was submitted in April 2017 to the IETF QUIC Working group on DNS-over-QUIC\nNon Standards Track options DNS-over-DTLS RFC8094 specified DNS-over-DTLS as an Experimental Standard in Feb 2017. To our knowledge that are no implementations of DNS-over-DTLS planned or in progress.\nOne issue with DNS-over-DTLS is that it must still truncate DNS responses if the response size it too large (just as UDP does) and so it cannot be a standalone solution for privacy without a fallback mechanism (such as DNS-over-TLS) also being available.\nDNSCrypt DNSCrypt is a method of authenticating communications between a DNS client and a DNS resolver that has been around since 2011.  It prevents DNS spoofing.  It uses cryptographic signatures to verify that responses originate from the chosen DNS resolver and haven\u0026rsquo;t been tampered with (the messages are still sent over UDP).  As a side effect it provides increased privacy because the DNS message content is encrypted.  It is an open specification but it has not been standardized by the IETF.  There are multiple implementations and a set of DNSCrypt servers available. OpenDNS offers DNSCrypt   Also check out an in depth comparison from Tenta.\nDNSCurve DNSCurve was developed in 2010 with encrypting the resolver to authoritative communications in mind. It was not standardized by the IETF.\nDNS-over-HTTPS Google offers a proprietary DNS-over-HTTPS service using a JSON format for DNS queries.\n"
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/using_dnsdist/",
	"title": "Using dnsdist",
	"tags": [],
	"description": "",
	"content": "Below is a simple configuration for setting up dnsdist as a server offering both DoT and DoH\naddACL(\u0026#39;0.0.0.0/0\u0026#39;) addACL(\u0026#39;::/0\u0026#39;) addLocal(\u0026#39;0.0.0.0:53\u0026#39;,{doTCP=true, reusePort=true, tcpFastOpenSize=X}) -- for dns over port 53 ipv4 , set X(int) for tcp fast open queue size addLocal(\u0026#39;[::]:53\u0026#39;, {doTCP=true, reusePort=true, tcpFastOpenSize=X}) -- for dns over port 53 ipv6 , set X(int) for tcp fast open queue size addTLSLocal(\u0026#34;0.0.0.0\u0026#34;, \u0026#34;/Path/fullchain.pem\u0026#34;, \u0026#34;/Path/privkey.pem\u0026#34;,{ doTCP=true, reusePort=true, tcpFastOpenSize=X }) -- path for certs and listen address for DoT ipv4 , by default listens on port 853. Set X(int) for tcp fast open queue size. addTLSLocal(\u0026#34;[::]\u0026#34;, \u0026#34;/Path/fullchain.pem\u0026#34;, \u0026#34;/Path/privkey.pem\u0026#34;,{ doTCP=true, reusePort=true, tcpFastOpenSize=X }) -- path for certs and listen address for DoT ipv6 , by default listens on port 853. Set X(int) for tcp fast open queue size. addDOHLocal(\u0026#34;[::]:443\u0026#34;, \u0026#34;/Path/fullchain.pem\u0026#34;, \u0026#34;/Path/privkey.pem\u0026#34;, \u0026#34;/dns-query\u0026#34;, { doTCP=true, reusePort=true, tcpFastOpenSize=X }) -- path for certs and listen address for DoH. Set X(int) for tcp fast open queue size. addAction(MaxQPSIPRule(X), DropAction()) -- set X(int) number of queries to be allowed per second from a IP addAction(AndRule({QTypeRule(dnsdist.ANY), TCPRule(false)}), DropAction()) -- drop ANY queries sent over udp , not useful for DoT and DoH only servers. pc = newPacketCache(X, 86400, 600) -- set X number of entries to be in dnsdist cache by default , memory will be preallocated based on the X number getPool(\u0026#34;\u0026#34;):setCache(pc) -- deafult cache setServerPolicy(leastOutstanding) -- server policy to choose the downstream servers for recursion newServer({address=\u0026#34;127.0.0.1:1111\u0026#34;, name=\u0026#34;resolver1\u0026#34;}) -- downstream servers for recursion newServer({address=\u0026#34;127.0.0.1:2222\u0026#34;, name=\u0026#34;resolver2\u0026#34;}) -- downstream servers for recursion setMaxUDPOutstanding(65535) setMaxTCPClientThreads(X) -- set X(int) to handle number of maximum tcp clients setMaxTCPConnectionDuration(X) -- set X(int) for tcp connection duaration from a connected client. X is number of seconds. setMaxTCPConnectionsPerClient(X) -- set X(int) for number of tcp connections from a single client. Useful for rate limiting the concurrent connections. setMaxTCPQueriesPerConnection(X) -- set X(int) , similiar to addAction(MaxQPSIPRule(X), DropAction()) "
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/installation/macos_homebrew/",
	"title": "MacOS Homebrew",
	"tags": [],
	"description": "",
	"content": " Installation Running Stubby on the command line  Logging from the stubby service   Test Stubby Running Stubby as a service Modify your upstream resolvers Configuring stubby    The Homebrew formula currently installs the 0.4.0 version of stubby, based on libgetdns 1.6.1\nSee this issue for details of problems with homebrew on BigSur: https://github.com/getdnsapi/stubby/issues/272#issuecomment-738622312\n Installation 1. Install Homebrew if you don\u0026rsquo;t aleady have it:\n/usr/bin/ruby -e \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026#34; 2. Install stubby\nbrew install stubby Running Stubby on the command line sudo /usr/local/opt/bin/stubby -C /usr/local/etc/stubby/stubby.yml -l  The -l flag enables logging  Logging from the stubby service The logging is currently crude and simply writes to a file. (We are working on making this better!) To see the logs\nsudo tail -f /usr/local/var/log/stubby/stubby.log Test Stubby A quick test can be done by using dig (or your favourite DNS tool) on the loopback address\n\u0026gt; dig @127.0.0.1 www.example.com Running Stubby as a service Running stubby like this will mean it runs continually in the background\nsudo brew services start stubby Modify your upstream resolvers Once this change is made your DNS queries will be re-directed to Stubby and sent over TLS! (You may need to restart some applications to have them pick up the network settings).\n For Stubby to re-send outgoing DNS queries over TLS the recursive resolvers configured on your machine must be changed to send all the local queries to the loopback interface on which Stubby is listening.\nTo switch to use Stubby for DNS resolution run:\nsudo /usr/local/opt/stubby/sbin/stubby-setdns-macos.sh To switch back to your default DNS config (no privacy) use:\nsudo /usr/local/opt/stubby/sbin/stubby-setdns-macos.sh -r Configuring stubby It is recommended to use the default configuration file provided which will use \u0026lsquo;Strict\u0026rsquo; privacy mode and spread the DNS queries among several of the current DNS Privacy test servers. Note that this file contains both IPv4 and IPv6 addresses. The file is installed in:\n/usr/local/etc/stubby/stubby.yml More information on how to customise the configuration can be found here.\n"
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/stubby_manager_gui/",
	"title": "Stubby Manager GUI",
	"tags": [],
	"description": "",
	"content": " Latest release is 0.4.0-a2 (11-Dec 2020) Background Status Installation Overview  Welcome page On/Off button Network Profiles  Untrusted Trusted Hostile   Networks Utilities Logs   Code Bug reports and feature requests Future features    Latest release is 0.4.0-a2 (11-Dec 2020) Background The Stubby Manager project is designed to provide a Graphical User Interface to manage Stubby aimed at both non-technical and advanced users. It will initially be supported on Windows only, macOS support will be added later. dnsprivacy.org is grateful to the Comcast Innovation Fund for supporting this project.\nStatus The code is still in development, an alpha release is available for early testing. Feedback is welcomed but note that the alpha release is not quite feature complete. Outstanding work items for the beta release include:\n Detection and use of network resolvers so the Trusted profile can use them Add, Filter and IPv6 options on the server table Adding a \u0026lsquo;None\u0026rsquo; option to the Network drop down Various usability improvements including improved alerting, icons and tooltips.  Installation The Windows Installer can be obtained from this page Latest windows installers After installing and running we recommend making the Stubby Manager Icon permanently visible in the system tray (select the Start menu and type \u0026lsquo;select which icons appear on the taskbar\u0026rsquo;).\nYou may also want to manually configure the Stubby Manager application to start at login/wake - this can be done\n Manually by creating a desktop short cut for the Stubby Manager application and then copy/pasting it into the %appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Start-up directory Installing a scheduled task based on the C:\\Program Files\\Stubby\\StubbyManager.xml file.   Overview Welcome page The \u0026lsquo;Info\u0026rsquo; Tab provides background information and more details on DNS, DNS encryption and getdns/stubby. These details can be hidden to provide a cleaner interface.\nOn/Off button For users who are happy to simply use the defaults provided (including the Stubby maintained resolvers) then simply hit the big button to turn Stubby on! Stubby will then automatically start again if the machine is rebooted. The display shows which networks and which network profiles are in use (see below)\nNetwork Profiles Three profiles are provided for flexible configuration for users who want to customise their setup. Each contains options to set the following:\n Encrypt DNS - Use only TLS as a transport (otherwise UDP, TCP and TLS are all available) Always Authenticate - Only connect to servers that have authentication information and where the TLS handshake can verify that information. Validate data - enable stub mode DNSSEC validation Round Robin - open connections to all the selected servers and send queries in turn to each. Default is to use the selected servers in order unless they become unavailable.   Untrusted This is the default profile provided on install, it encrypted DNS using DNS-over-TLS (DoT) to the Stubby recursive resolvers. It is suitable for use in most networks where DoT is not blocked - note however that the resolvers are based in Europe so users outside Europe may want to choose alternative resolvers for better latency.\nTrusted The trusted profile currently uses the Quad9 resolvers BUT in the beta release will use the network provided resolvers for resolution, attempting to use DoT opportunistically. In effect this means that connections will be encrypted if the network resolver supports DoT, but not (at this point in time) authenticated. If the network resolver does not support DoT, clear text (UDP/TCP on port 53) will be used. Hostile This is appropriate for use in networks with stricter security policies or that attempt to engage in active surveillance of users e.g. by blocking DoT or well known DoH resolvers. In the beta release it will use DoT to the Quad9 resolvers, in a future release it will support fallback to DoH to the Quad9 resolvers. Note that it may be better to use a full VPN on such networks.\nNetworks Users can configure a default profile to be used automatically when joining new networks and also specific profiles to use on specific networks on this tab. Utilities This tab provides more detailed logging and control for troubleshooting or advanced users. Logs The beta release supports displaying the logs from the stubby deamon in this tab, a future release will allow inspection of DNS queries. (Since stubby runs as a daemon, advanced users can use tcpdump or wireshark to inspect their DNS queries listening on local host port 53).\nCode The code is available on github: https://github.com/Sinodun/Stubby_Manager\nBug reports and feature requests Please file issues at: https://github.com/Sinodun/Stubby_Manager/issues\nFuture features Future release will include a probe mode that can be run to determine the connectivity and latency of available resolvers and also some of their basic (measurable) properties such as DNSSEC support. A custom profile and expert mode will also be available to further customise the Stubby configuration.\n"
},
{
	"uri": "http://dnsprivacy.org/current_work/",
	"title": "Current Work",
	"tags": [],
	"description": "",
	"content": " This page describes at a high level the progress in various areas of DNS Privacy work (most recent activity at the top) mainly focussed on DNS-over-TLS.\n August 2021  RFC 9310: Zone transfer over TLS (XoT) is published RFC 9102: TLS DNSSEC Chain Extension finally published in the Independent Submission stream after hitting the buffers in the TLS WG https://sdns2021.dnscrypt.info conference held online  July 2021  IETF 111 Discussions  ADD WG Agenda DPRIVE Session 1: DoQ and Unauthenticated encryption to Authoritatives DPRIVE Session 2: More discussion on how to signal Encryption at Authoritatives ANRW talks on DNS Privacy: Distributing Queries and Institutional Privacy   Great summary of the responses to Mozilla\u0026rsquo;s TRR consultation by Andrew Campling Firefox announces roll out of DoH by default (using CIRA) for Canadian users Apple iCould Private Relay will encrypt DNS and web traffic  June 2021  Quad9 will appeal the injunction obtained by Sony seeking to block DNS resolution of certain domains. Windows 11 will include DoH support Mozilla\u0026rsquo;s TRR Public Consultation results Geoff Huston\u0026rsquo;s take on resolver centrality from IDS2021  May 2021  QUIC protocol specification is published: RFC9000 Increasing adoption of the European Resolver Policy: press release OARC 35 included talks on Oblivious DNS, XFRW-over-TLS and \u0026lsquo;DNS over HTTPS over CGN or public NAT64\u0026rsquo;  April 2021  European Resolver Policy published  RIPE DNS WG talk on this topic   Updates on DoH Support in Chrome on Linux APNIC article on the interaction of web hosting co-location and DNS Privacy  March 2021  Microsoft Edge fixes performance issue with DoH NSA prodding tips on selecting a protected DNS service IETF 110 activity:  Opportunistic ADoT and SVCB signalling discussed in DPRIVE XFR-over-TLS draft passes Working Group Last Call    February 2021  NDSS 2021 DNS Privacy workshop  BIND9 add support for DoH and XoT (XFR-over-TLS) in development release 9.17.10! Quad9 public domain name service moves to Switzerland for maximum internet privacy protection  And becomes the first large scale recursive operator to publishing an RPS: a privacy policy based on RFC8932 (BCP232): Recommendations for DNS Privacy Service Operators: quad9.net/privacy/policy/   CENTR hold a webinar on deploying DoH  January 2021  EU NISA Directive may require anyone running a \u0026lsquo;DNS privacy service\u0026rsquo; to register - even if running your own resolver! NSA report on use of encrypted DNS - warns against use of third-party DoH resolvers and recommends blocking known DoT/DoH endpoints in many scenarios Microsoft confirm Windows 10 21H1 will include DoH Mozilla comment period for TRR Consultation extended to 20th Jan  December 2020  Adguard launch the first DNS-over-QUIC resolver service Cloudflare launch a Oblivious DoH service  November 2020  BIND release initial implementation of DoT in 9.17.7 NDSS DNS Privacy Workshop Call for Papers Encrypted DNS configuration profiles for Apple devices. Mozilla start a Comment period on their use of DoH and TRRs Work on detecting encrypted DNS blocking by OONI and CIS India New version of draft on requirements for recursive to authoritative DNS encryption in IETF DPRIVE WG  October 2020  BCP232 is published: RFC8932 Recommendations for DNS Privacy Service Operators Plans for Chrome to prototype ECK (Encrypted Client Hello) OARC33  Presentation on upcoming Stubby GUI Talk on DNS Shotgun performance measurement tool with interesting results on the overhead of DNS encryption    September 2020  Official Apple documentation for the encrypted DNS APIs: dnssettings, nsednssettingsmanager and privacycontexts Law proposed to block DoT, DoH, ECH and TLS 1.3 by Russia Review of NextDNS service Cloudflare launches beta Warp 1.1.1.1 clients for Windows and macOS desktop Android add DoH to Chrome  August 2020  ADD WG starts initial work on requirements for discovery mechanisms draft-pauly-add-requirements DPRIVE WG sees support for working on opportunistic encryption for recursive to authoritative Microsoft addDoH settings to Windows 10 review build and  Adds DoH to Edge    July 2020  IETF 108:  ADD WG decides to back to analysing the requirements after reviewing the current proposals DPRIVE WG: Zone transfers over TLS discussed   Windows 10 Insider Preview Build 20185 includes DoH configuration options for recognised resolvers ZDNet article: Iranian hacker group becomes first known APT to weaponize DNS-over-HTTPS (DoH) IETF BCP Recommendations for DNS Privacy Service Operators is approved for publication  June 2020  Comcast become the first ISP to join Mozilla\u0026rsquo;s Firefox TRR program OONI publish a study showing 57% of well known DoT endpoints are blocking in Iran Apple announce DoT and DoH support and an API for apps to configure their own encrypted resolver Searching in the address bar can leak DNS queries on the local network in Chrome and Firefox  May 2020  Chrome 83 ships with DoH auto-upgrade option (and manual configuration options) Microsoft announced DoH client available for Windows Insiders New drafts submitted to the IETF ADD WG on discovery EDDI has produced a Interim DoH Discovery Proposal for Browser and OS vendors US govt agencies to disable DoH until their own federal DoT/DoH service is available ISC publish a design document for their upcoming support of DoT and DoH  April 2020  DNS-over-QUIC draft adopted by DPRIVE WG at IETF CIRA (the .ca registry) announce Canadian Sheild a free DoT\u0026amp;DoH service hosted in Canada Latest from Chrome on their DoH release plans Cloudflare now offer \u0026ldquo;Cloudflare 1.1.1.1 for families\u0026rdquo; with filtering options The Register article on the Cloudflare 1.1.1.1 audit results  March 2020  ADD holds it first Working Group meeting (virtually) at IETF 107 ICANN public Version 2 of their Local and Internet Policy Implications of Encrypted DNS Chrome release freeze will delay rollout of DoH  February 2020  Firefox moves to DoH by Default for all US users. ADD (Adaptive DNS Discovery) Working Group at IETF has charter approved and will meet at IETF 107 in Vancouver Presentations at OARC 32:  DNS Encryption: Operational Experience and Insight A DoT naming, publication, and discovery scheme Status of DoH/TRR in Firefox    January 2020  Early observations from the BT and DT DoH trials - https://www.youtube.com/watch?v=GhyO9K_w1jU\u0026amp;feature=youtu.be Interesting APNIC Blog article on What is the DNS anyway? ACLU piece on the DoH Privacy Battle Details of Google Chrome\u0026rsquo;s \u0026lsquo;same-provider-upgrade\u0026rsquo; plans EFF\u0026rsquo;s take on Encrypting DNS: Year in Review 2019   December 2019:  Ongoing RIPE Atlas measurements of the use-dns-application.netdeployment (the \u0026lsquo;canary\u0026rsquo; domain for DoH). Latest plots are here: DEC 2019 status BT announce trials of DoT/DoH Good update on the latest DoH status for major browsers Official NGINX guide to how to set up DoT and DoH  November 2019:  Microsoft announce plans to implement DoH in Windows\u0026hellip;. at some point: Windows will improve user privacy with DNS over HTTPS Paul Vixie\u0026rsquo;s talk on DoH at NANOG77: DNS WARS: Episode IV A New Bypass Letter to US Congress regarding Chromes DoH plans  Chromes response that it does not plan to default to Google Public DNS EFF and partners write in support of DoH Mozilla ask congress to investigate ISPs use of consumer data   Latest version of DNS Privacy Requirements for Exchanges between Recursive Resolvers and Authoritative Servers from the IETF DPRIVE WG Latest proposals on \u0026lsquo;Adaptive DNS\u0026rsquo; from DPRIVE WG  October 2019  Comcast begin a phase one of a DoH public beta: https://doh.xfinity.com/dns-query and a DoT public beta: dot.xfinity.com ICANN OCTO document including evaluation of encrypted DNS: Local and Internet Policy Implications of Encrypted DNS Mozilla release FAQ on DoH: DNS over HTTPS FAQs. DNSCrypt implements a scheme similar in concept to Oblivious DNS ANONYMIZED DNSCRYPT Nice article on DNS Security: Threat Modeling DNSSEC, DoT, and DoH from netmeister.org Netherlands National Cyber Security Centre publishes a factsheet on DNS monitoring Factsheet DNS monitoring will get-harder Opera announces experimental support fro DoH on an opt-in basis.  September 2019  Another blog from Bert Hubert: Centralised DoH is bad for privacy in 2019 and beyond IMC Paper: An Empirical Study of the Cost of DNS-over-HTTPs And today the Encrypted DNS Deployment Initiative launches: \u0026quot; a collaborative effort to ensure the smooth global adoption and reliable operation of DNS encryption technology. \u0026quot; Chrome announces experiment to upgrade to DoH with existing DNS provider OpenBSD has disabled DoH in their Firefox packages Firefox announce rollout of DoH by default in the USA during September\u0026hellip;. and it will use Cloudflare  And a non-standard method to disable it\u0026hellip;.. And details of how to do this in BIND   And\u0026hellip;. some reaction about the Firefox DoH announcement\u0026hellip;  CircleID - http://www.circleid.com/posts/20190906_dns_over_https_the_privacy_and_security_concerns/  ISP Review - https://www.ispreview.co.uk/index.php/2019/09/headache-for-uk-isps-as-firefox-adopt-dns-over-https-by-default.html Think Broadband - https://www.thinkbroadband.com/news/8525-doh-on-its-way-to-firefox-for-usa-users-first ZDNet - https://www.zdnet.com/article/mozilla-to-gradually-enable-dns-over-https-for-firefox-us-users-later-this-month/ Computer Business Review - https://www.cbronline.com/news/firefox-dns-over-https Engadget - https://www.engadget.com/2019/09/07/firefox-dns-over-https-by-default/ Forbes - https://www.forbes.com/sites/zakdoffman/2019/09/08/firefox-announces-major-new-encryption-default-to-protect-millions-of-users/#2ee8308518c0 MenaFN - https://menafn.com/1098979803/India-Soon-Firefox-will-encrypt-domain-name-requests-by-default    August 2019  Great study on fingerprinting websites based on Encrypted DNS Queries encrypted-dns-privacy-a-traffic-analysis-perspective BIND announce future support for DoT in their annual report ISC annual report Various of opinion pieces on DoH/DoT  InfoBlox Blog \u0026lsquo;DoT DoH and the DNS Last Mile Security Problem\u0026rsquo; Nice article from Stacie Hoffman on \u0026lsquo;Recalibrating the doh debate\u0026rsquo;   UK Internet Watch Foundation writes to the UK secretary of State about DoH. Experimental support for DoH in Knot Resolver  July 2019  IETF DPRIVE WG: New/updated drafts of using TLS for Zone transfers: DNS Zone Transfer over TLS and DNS Zone Transfer using DNS Stateful Operations ANRW Paper: Analyzing the Costs (and Benefits) of DNS, DoT, and DoH for the Modern Web Hackathon @ Africa Internet Summit 2019 results include measurement of DoH traffic Africa Hackathon results Enterprises openly discussing blocking DoH endpoints, and publishing lists of IPs Big twitter debates over the pros and cons of DoH to Cloudflare including  Declaration of the \u0026lsquo;Streisand effect\u0026rsquo; happening Allegations of the first malware using DoH   UK ISPA announces finalists for 2019 Internet Villains, including Mozilla its for \u0026lsquo;DoH by default\u0026rsquo; plans, then backs down but with detailed explanation because Mozilla finally make a clear statement about their Firefox DoH plans in the UK: \u0026lsquo;We have no current plans to enable DoH by default in the UK\u0026rsquo;, but they don\u0026rsquo;t rule out other European countries.  June 2019  IETF ADD BoF: Plans announced to hold a BoF at IETF 105 in Montreal for \u0026lsquo;Applications doing DNS\u0026rsquo; IETF DNSOP WG: Latest version of a mechanism to discover recursive resolver information including DoT/DoH: DNS Resolver Information Self-publication Google officially launches its Public DoH service A flurry of opinion papers, meetings and media discussion about DoH/DoT  ICANN 65 (Policy Forum): Policy Aspects of DNS over HTTPS (DoH), DNS over TLS (DoT) and Related Issues Eurodig 2019: \u0026lsquo;DNS over HTTPS – What is it, and why should you care?\u0026rsquo; The Open Rights Group Report CENTR position paper on DoH   NSD 4.2 supports DoT - first open source authoritative server to do this!  May 2019  Interesting analysis of the current DoT/DoH software picture: https://doh.defaultroutes.de/implementations.html UK House of Lords Agenda for 14th May includes a Question on DoH. This follows much media coverage in the UK e.g.  The Times article \u0026ldquo;Warning over Google Chrome browser’s new threat to children\u0026rdquo; Daily Mail \u0026ldquo;Google\u0026rsquo;s plans for new encrypted Chrome web browser could make it harder for UK government to stop computer users watching porn online\u0026rdquo;  \u0026ldquo;Crisis talks are being held on May 8 by the National Cyber Security Centre (NCSC), part of GCHQ, to discuss the risks the new encrypted browser will present, \u0026quot;   PC Pro article on DoH   Much discussion of DoH at 2019 the ICANN DNS Symposium (including a panel in the afternoon session)  Good talk on the DoH Dilema by Vittorio Bertola ISP centric view of DoH by Andy Fidler of British Telecom And the view of Paul Vixie on Benefits and Hazards of Non- Local DNS Resolution Panel on DoH (1hr 50 mins into this recording)   Interesting\u0026hellip;. https://www.nextdns.io: “The next-generation DNS”, a hosted, private DNS resolver with DoT and DoH support and blocklists. Quad9 have launched their own mobile app \u0026ldquo;Quad9 Connect\u0026rdquo; for Android  Along with a statement they will never host web content on the same IP as a DoH endpoint.   The ISP Internet Initiative Japan (IIJ) launches a Beta trail of DoT and DoH (article is in Japanese)  April 2019  Mozilla statement on their DoH TRR policy requirements. Knot resolver adds experimental DoH in 4.0.0! Latest results from Mozilla on their Firefox DoH testing  March 2019  So much discussion of DoT/DoH at IETF 104:  The DoH WG is still discussing the ins and outs of a proposed discovery mechanism: https://datatracker.ietf.org/doc/draft-ietf-doh-resolver-associated-doh/ Statement from Mozilla on future deployment plans: https://mailarchive.ietf.org/arch/msg/doh/po6GCAJ52BAKuyL-dZiU91v6hLw Also a statement from Google Chrome on their DoH plans: https://mailarchive.ietf.org/arch/msg/dnsop/GE8v2Yz6zsl28clDvlshGh3rYlc Side meeting on \u0026lsquo;DoH/DoT deployment models and centralisation of DNS services\u0026rsquo; produced much discussion if no conclusions or concrete actions\u0026hellip;. DPRIVE WG discussed the Future requirements, The DNS Privacy Operator BCP, DNS Privacy Application policy, Authentication of Authoritative servers and Bootstrapping mechanisms!   The Stubby chocolatey package is now accepted and has the name stubby (thanks to the chocolatey folks - the previous stubby package was renamed!). A trio of drafts discussing DoH deployment issues causing much discussion on the IETF DOH/DPRIVE/DNSOP mailing lists:  https://datatracker.ietf.org/doc/draft-livingood-doh-implementation-risks-issues/ https://datatracker.ietf.org/doc/draft-reid-doh-operator/ https://datatracker.ietf.org/doc/draft-bertola-bcp-doh-clients/     Nice intro to DNS Privacy from ISOC Work has started on a chocolatey package for Stubby: https://chocolatey.org/packages/stubby-dns/0.2.5.0 It is submitted and waiting for moderation (the name \u0026lsquo;stubby\u0026rsquo; was already taken!) New Windows Installer for Stubby available (v0.2.5 stubby/v1.5.1 getdns/V1.1.1b OpenSSL). There have been changes to versioning and file installation. Please see the release notes at Windows Installer for Stubby.  February 2019  Write up by Bert Hubert giving a good overview of the FOSDEM DNS privacy panel discussions New Windows Installer for Stubby available (v0.2.5 stubby/v1.5.1 getdns/V1.1.1a OpenSSL) Lots of action at FOSDEM surrounding DoH:  DNS Privacy Panel with Bert Hubert, Daniel Stenberg and Stéphane Bortzmeyer The DoH Dilemma by Vittorio Bertola DNS over HTTPS - the good, the bad and the ugly by Daniel Stenberg    January 2019  Cloudflare and Facebook announce a pilot of ADoT (Authoritativd DNS-over-TLS): DNS over TLS: Encrypting DNS end-to-end More details on support for Stubby in Asuswrt-Merlin Adguard servers added to the DNS Privacy Public Resolvers page. Google launch a DoT service! Credentials are added to Stubby in the 0.2.5 release. Some nice articles by Fernando Gont of ISOC on DoH support in Firefox and Issues with DoT in systemd Unbound version 1.8.3 now supports EDNS(0) Keepalive and TCP connection management  Nov 2018  A write up of our most recent Benchmarking work is now available: Follow-up Performance Measurements (Q4 2108) Interesting APNIC blog on \u0026lsquo;Opinion: consolidation, centralization, and the Internet architecture\u0026rsquo; by Jari Arkko Privacy advocate Senator Wyden urges DHS to adopt encrypted DNS Interesting work on DoH monitoring by the HPRC group at the IETF 103 Hackathon  October 2018  DoH becomes a RFC: RFC8484 - \u0026lsquo;DNS Queries over HTTPS (DoH)\u0026rsquo; White paper at PETS on traffic analysis of DoH traffic: \u0026lsquo;DNS Privacy not so private: the traffic analysis perspective\u0026rsquo; Recent talks on DoT/DoH:     OARC 29: Where will encrypted DNS transports push DNS operators?- Slides, Video OARC 29: Operational experience for DNS over HTTPS (DoH) and DNS over TLS (DoT)- Slides, Video RIPE 77: It\u0026rsquo;s DNS Jim, But Not as We Know It - Slides, Video RIPE 77 DNS WG: DNS Privacy measurements (Benchmarking DoT) - Slides, Video RIPE 77 BCOP TF: Implications of DNS over anything but UDP - Slides, Video    Thanks to Jonathan Underwood for all his work on Stubby in OpenWRT!\n  Chrome is working on exposing DoH via a user configuration option with a drop down list and user defined option.\n  Quad9 announce support for DoH!\n  More dual DoT \u0026amp; DoH servers thanks to DNS Warden!\n  Sept 2018  Video of a UKNOF presentation on considerations for operators of encrypted DNS. More testing of Firefox+Cloudflare in Firefox Beta, but also no clear statement on future plans. Adding CleanBrowsing and Tenta servers to the Test Servers page. New draft proposing a way to (insecurely) discover a DoH server on your local network. Great blog by Bert Hubert of PowerDNS on using third party DNS providers.  Aug 2018  Firefox announces the results of its DoH experiment but still no work on the future default config options. Thanks to john9527 for stubby support in his Asuswrt-Merlin LTS fork. And Firefox nightly now has a UI for configuration of the DoH server The awesome folks at PowerDNS have an experimental DoH service and are working to add DoH to dnsdist - details in this mail post. Android Pie 9 includes Opportunistic DNS-over-TLS - woot! I-D draft-dickinson-dprive-bcp-op has been adopted by the DPRIVE WG Many thanks to BlahDNS for setting up a DNS-over-TLS service. Servers in both Germany and Japan!  Jul 2018  Lots of interesting discussion at IETF 102 on DRIU (DNS Resolver Identification and Use) and \u0026lsquo;Resolverless DNS\u0026rsquo; Centr interview \u0026ldquo;The DNS community brought DNS over HTTPS on itself\u0026rdquo; Great work at the IETF 102 Hackathon on Oblivious DNS, DoT for recursive to authoritative and DoH! Talk from the ICANN DNS Symposium on \u0026lsquo;Where\u0026rsquo;s my DNS?' (video)- questions about current and future DNS resolution on end user devices including the current status of DoH. Many thanks to Fondation RESTENA (the NREN for Luxembourg and the registry for the .lu ccTLD) for setting up a DNS-over-TLS privacy server!  Jun 2018  Great news - the latest systemd-resolvd release now supports DNS-over-TLS! Interesting work by the folks at Bromite (a privacy focused fork of Chromium that runs on Android). They just enabled the Chromium DoH implementation by exposing configure options (via chrome://flags). See this user guide.  Oh, and they do a neat fingerprint detection page to see what your browser sends about you in HTTP headers!   Awesome tutorial by linuxbabe.com about using Stubby on Ubuntu Desktop! The DoH draft is in WGLC and is getting significant discussion!  The amazing folks at dnsdist are working on implementing DoH and finding important issues with the draft   Mozilla have been blogging about their plans for using DoH  Here\u0026rsquo;s the details of how it works and how to configure it Heres a blog in their general strategy    May 2018  DPRIVE WG at IETF just re-chartered to cover adding confidentiality to recursive to authoritative exchanges. Interesting presentations from the DNS WG @ RIPE 76  Measurements on DNS Privacy (DNS-over-TCP and TLS benchmarking) High Performance DNS-over-TCP A Survey on DNS Privacy Deploying DNS-over-TLS at RIPE BCOP WG - DNS Privacy PCP Dude, where\u0026rsquo;s my DNS? (subtitle \u0026lsquo;DNS-over-HTTPS is coming!')   The Stubby Windows installer and macOS GUI App are both updated to use the getdns 1.4.2rc1 and stubby 0.2.3rc1 releases. Unbound 1.7.1 now supports authentication of DNS-over-TLS using PKIX certificates!  April 2018  Thanks to Matthew Vance for a docker image combining Stubby and Unbound. Android announcement about the DNS-over-TLS support in Android P Developer preview. We are excited about the new proposal for for Oblivious DNS to hide queries from resolver operators Cloudflare now running an open recursive resolver with DNS-over-TLS and DNS-over-HTTPS! Details on the Test Servers page. The latest release of dnsdist includes support for DNS-over-TLS - thanks PowerDNS folks! RFC8310 is now published: Usage Profiles for DNS over TLS and DNS over DTLS Write up of the IETF101 Hackathon work on DoH.  March 2018  First version of Recommendations for DNS Privacy Operators is now published as a IETF draft for review. Videos from the DNS Privacy Workshop 2018 are now available on You Tube on the DNS Privacy Project Channel ISC announce the next version of BIND 9 will include QNAME minimisation Also, 3 of the dnsovertls(N).sinodun.com servers are running BIND 9.12 and are now padding responses!  February 2018  Live traffic for a subset of Test servers now available Interactive map of the DNS Privacy test server locations now available Another new test server using Knot resolver - thanks the folks at dns.neutopia.org Nice talks at FOSDEM yesterday from Stephane Bortzmeyer on DNS Privacy and Willem Toorop on Stub resolvers The getdns and stubby packages are now available in LEDE OpenWRT! Latest release of Knot Resolver does TLS forwarding upstream!  January 2018  We are now using a new and improved getdns based monitoring plugin for our Test Server Monitoring dashboard which can test more server capabilities! Two more Test servers now listen on port 443: dnsovertls.sinodun.com and dnsovertls1.sinodun.com Thanks to the Knot Resolver folks for quick fixes to some issues with DNS-over-TLS support - the latest release (1.5.1) seems much more stable! We note that dnscrypt.org is now re-directed to this site due to changes in the DNSCrypt project status We also have additional documentation on automating certificate renewal  December 2017  Check out the interesting privacy work and products coming out of the Tenta project - in particular their Tenta browser, open source DNS resolver and comparison of DNS-over-TLS vs DNSCrypt! 2 new test servers:  dnsovertls3.sinodun.comwhich supports TLS 1.3 and TLS 1.2 (thanks again to Surfnet for hosting)!  Version 1.3.0 of getdns (to be release Dec 21st) will support TLS 1.3 when linked against OpenSSL 1.1.1, so build stubby against that to that if you want to test out TLS 1.3!   dns.bitgeek.in based in India - many thanks Sairam Kunala!   Windows Installer is updated to use the getdns 1.2.1rc-1 and Stubby 0.2.0 releases! We now have an alpha release of a prototype StubbyManager GUI for macOS. This is a work in progress! Quad9 is now added to the Test servers pages  November 2017  Excellent blog post by Stephane Bortzmeyer about the new Quad9 service. (Note that Quad9 have not themselves announced official DNS-over-TLS support) Also a blog post from Alex Band on configuring Stubby with Quad9. Work at the IETF Hackathon on DANE verification of DNS-over-TLS servers. Congrats to the DNS team who won overall best contribution! Check out a new docker image providing Stubby using Quad9  October 2017  We have three new test servers added during October - thanks to Lars de Bruin and Gerold Krötlinger! The first release of a Windows installer for the Stubby CLI tool is announced. Please test! (A GUI is on the way\u0026hellip;..) The DNS Privacy Workshop will again be co-located with NDSS in San Diego - February 2018. We have a new DNS Privacy server in South America - Thank you NIC Chile! We talked at OARC 27 about DNS Privacy clients. You tube video available.  September 2017  Jan Zorz has written an excellent article about his experience trying to set up DNS Privacy. We got lots of useful feedback from him and are working on the issues he found! Thanks Jan.  August 2017  We are very pleased to announce that the OTF is now generously funding work by dnsprivacy.net! We are pleased to announce that there is now an official Homebrew formula for Stubby! Stubby now has its own source code repository.  July 2017  The IETF EDU Privacy Tutorial is happening again at IETF 99! Slides are here: DNS Privacy Tutorial. We have a new DNS Privacy server in Asia!! See Experimental DNS-over-TLS Servers  We are talking on 6th July about getdns, Stubby and DNS Privacy at AFNIC JCSA! Here is our presentation from RMLL!  June 2017  NEW! We now have live monitoring of the Experimental DNS Privacy servers A short video on our work at the IETF Hackathons is now available! We have several new Experimental DNS-over-TLS servers now The DNS Privacy Tutorial is going to be given again at IETF 99 in Prague  May 2017  Here\u0026rsquo;s a presentation on DNS-over-QUIC from OARC (slides, video - got to 8:04 hrs in) Here\u0026rsquo;s our presentations on dnsprivacy.net at OARC (slides, video - go to 6:45 hrs in) and RIPE (slides, video) The dnsprivacy.org website content has now been migrated to its own server after being hosted on portal.sinodun.com.  April 2017  New Internet Draft on DNS in dedicated QUIC Connections and lots of interesting drafts around DNS over HTTP getting discussion Latest 1.1.0 release of getdns includes Stubby! The DNS Privacy team is highlighted in the IETF Hackathon Videos We\u0026rsquo;ll be talking at both the RMLL conference (5th July) and at JCSA in Paris (6th July) about DNS Privacy We are proud to add Salesforce as supporters of the DNS Privacy project!  March 2017  Great work at the IETF 98 Hackathon on DNS Privacy. In particular see Stephane Borztmeyer\u0026rsquo;s blog on his DNS-over-TLS monitoring plug-in. Proceedings from the NDSS DNS Privacy workshop are available here. Thanks to Matthew Ford from ISOC for a great write up of the workshop. We\u0026rsquo;ll be talking at OARC about dnsprivacy.net  February 2017  We are very pleased to announce a new donation from NLnet Foundation to support work on Stubby. Thank you for your generous support!! Preliminary agenda published for NDSS DNS Privacy Workshop (26th Feb, San Diego) DNS Privacy will be a topic at the IETF 98 Hackathon - please come along!  January 2017  Planning under way for the NDSS DNS Privacy workshop on 26th February in San Diego https://datatracker.ietf.org/doc/draft-ietf-dprive-dtls-and-tls-profiles/ has cleared WGLC 1.0.0 release of getdns (which supports DNS-over-TLS) Knot resolver 1.2.0 released with improved DNS-over-TLS support Warren Kumari has provided a Docker container for easy deployment of a DNS-over-TLS server!  December 2016  Improved usability for Stubby planned for the 1.1.0-alpha3 release The content of this site is now available via the dnsprivacy.org site. CoreDNS now offers DNS-over-HTTPS (as well as DNS-over-TLS). Also see dingo if interested in DNS-over-HTTPS clients.  November 2016  IETF 97 EDU team held a DNS Privacy Tutorial, which got coverage in both Heise and two articles in The Register: The_Register_22Nov, The_Register_6Dec More work at the Hackathon on Knot Resolver DNS Privacy implementation, TCP support in BIND and Stubby. A further DNS Privacy test server made available thanks to dkg. DPRIVE working group discussed a possible re-charter to focus work on the Resolver to Authoritative problem. DNS-over- HTTP(S) BOF held  October 2016  2 more test DNS Privacy resolvers made available (Thanks to Surfnet for resources!) getdns version 1.1.02-alpha released with a prototype implementation of Stubby - a DNS Privacy stub resolver https://datatracker.ietf.org/doc/draft-ietf-dprive-dtls-and-tls-profiles/ moved into Working Group Last Call https://datatracker.ietf.org/doc/draft-mayrhofer-dprive-padding-profile/ was published to propose specific policies for padding DNS packets https://datatracker.ietf.org/doc/draft-ietf-dnssd-privacy/ adopted by the DNS-SD working group  September 2016  https://datatracker.ietf.org/doc/draft-ietf-dprive-dnsodtls/ passed WGLC with status \u0026lsquo;Experimental\u0026rsquo; and was submitted to IESG for review  August 2016  WGLC starts for https://datatracker.ietf.org/doc/draft-ietf-dprive-dnsodtls/   July 2016  https://datatracker.ietf.org/doc/draft-bortzmeyer-dprive-step-2/ was published as a first step in describing the Resolver to Authoritative problem  June 2016  OARC made a test DNS Privacy server available - many thanks!  May 2016  Presentation in the RIPE DNS working group on experimental deployments of DNS Privacy servers.  RFC7858 Published: Specification for DNS over Transport Layer Security (TLS)  April 2016  Work at the IETF Hackathon in Buenos Aires to start implementing TLS in Knot resolver  March 2016  getdns 1.0.0b1 release! RFC7816 Published: DNS Query Name Minimisation to Improve Privacy  February 2016  EDNS0 Keepalive draft approved for publication as RFC7828  January 2016  5966bis draft approved for publication as RFC7766 Authentication and (D)TLS Profile for DNS-over-TLS and DNS-over-DTLS draft adopted by DPRIVE Testing of FreeBSD implementation of TCP Fast Open. Reported bug in linux client implementation of TFO (now fixed) and made feature request to OpenSSL to support client side TFO. Started work on Unbound patch to support TFO on Linux, FreeBSD and OS X.   December 2015  Produced first version of Authentication and (D)TLS Profile for DNS-over-TLS and DNS-over-DTLS draft for submission to DPRIVE working group Client side EDNS0 keepalive option implemented in getdns SPKI pinset TLS authentication available in getdns  November 2105  Attended IETF 94.  Participated in Hackathon including getdns implementation of EDNS0 Padding option Last call review of DNS-over-TLS Agreed to start work on combined draft for (D)TLS Authentication mechanisms    October 2015  Attended OARC Fall Workshop. Presentationed onUsing TLS for DNS privacy in practice. Attended ICANN in Dublin, presented on DNSSEC for Legacy applications including discussing DNS privacy features of getdns.   August 2015  Addition of TLS authentication using hostname to getdns  July 2015  IETF 93  Work on getnds TLS authentication during Hackathon Working group presentations on 59966-bis draft and https://tools.ietf.org/html/draft-ietf-dnsop-edns-tcp-keepalive-02   0.3 release of getdns including  New transport list options allowing user to flexibly specify an ordered list of accepted transport options from TLS, STARTTLS, TCP, UDP Ability to configure idle timeout associated with TCP connections    May 2015  0.2 release of getdns including STARTTLS   April 2015  Release of version 0.1.8 of getdns including TLS and TLS with fallback to TCP  March 2015  Work started in getdns to implement dns-over-tls - Demo given at IETF92 in Dallas of proof-of-concept code. Publication of updated set of patches in the dns-over-tls repository Publication of https://tools.ietf.org/html/draft-ietf-dnsop-5966bis-01  January 2015  Changed to using DNS-over-TLS instead of T-DNS Extend LDNS and NSD patches to include options to use the TO bit (for experimental inter-op testing) Publish LDNS code into repository for review getdns work put on hold, instead start work on Unbound server patch  November 2014  Presenting at IETF 91 Started work on T-DNS in getdns  October 2014  Implementation of TCP Fast open support (linux only) in getdn for stub mode in 0.1.5 release. Testing of 0.1.5 getdns codebase which implements TCP pipelining. POC implementation of TCP Fast Open in ldns, Unbound and NSD. Patch released to implement STARTTLS in NSD. Released patch to ldns for connection re-use.  September 2014  Continued helping to implement switch to ldns for stub mode in getdns.  Basic support for synchronous API implemented and per query namespaces also supported. (Note DNSSEC stub validation is still done by unbound at this point\u0026hellip;.)   Creating patch for ldns/drill to support connection reuse for TCP. Using this from synchronous stub mode in getdns to demonstrate connection re-use.  Work on TCP related drafts  August 2014  Working on getnds  Added a new test to verify which transport queries are actually sent over Helping to implement the switch to ldns for stub mode Working on support for pipelining of TCP queries    July 2014  Attended IETF 90 in Toronto and gave a demo of sending queries from drill to Unbound using T-DNS Started looking at pipelining multiple queries from drill to Unbound Extending test framework to test multiple scenarios for drill \u0026lt;-\u0026gt; Unbound Finished patch to drill to add extra options:  -l will send a single query over TLS -L will send a single query over TLS after negotiating an upgrade using a STARTTLS/CH/TXT query   Finished patch to Unbound to support \u0026lsquo;upgrade_tls\u0026rsquo; configure option. This enables unbound to receive a a STARTTLS/CH/TXT query, send a STARTTLS/CH/TXT response when configured properly, upgrade to SSL and then receive a query over SSL.   June 2014  Started work on Unbound \u0026lt;-\u0026gt; NSD hop Completing implementation in Unbound to get drill \u0026lt;-\u0026gt; Unbound hop working  Implemented a patch to drill to support T-DNS for a single DNS query Discussions on the class to be used for the dummy query. The resolver -\u0026gt; authoritative hop might be better implemented with a IN class query. Start work on Unbound - understand current SSL-upstream implementation From Willem: LDNS does not have support for asynchronous operation so in the short term it will probably be used in getdns just in synchronous mode so that the implementation of TDNS can continue.  Further work on test framework  May 2014  Current getdns stub implementation cannot support sending of CH class queries as it uses libunbound which denies the query and never sends it onwards. Discussed in getnds meeting 19th May that further implementation of T-DNS in getdns will have to wait until libunbound is replaced with ldns for the stub mode. Current understanding is that Willem is going to tackle this in the next few weeks.  Identified need to support CH class in getdns for dummy STARTTLS query. Start on implementation of this.  This implementation highlighted the need for getdns to gracefully handle refused queries that have no associated data.   Created test harness to create a dummy STARTTLS query Agreed that initial implementations will use the dummy CH class query (not the TO bit) Forked getdns. Familiarisation with getdns code base - get it to install and run! Kick off meetings with T-DNS and getdns teams Creation of project issue tracker and wiki site Reading of relevant drafts and documentation - capture any early technical questions  "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/using_a_tls_proxy/",
	"title": "Using a TLS proxy",
	"tags": [],
	"description": "",
	"content": "How to use a TLS proxy with a DNS nameserver It is of course possible to configure a TLS proxy in front of a DNS nameserver to provide DNS-over-TLS. Example configurations for nginx and haproxy are given here.\nA more comprehensive setup guide using Docker has been provided by Warren Kumari: dprive-nginx-bind (Thanks Warren!)\n Limitations One of the limitations of using a proxy is that without additional work this will normally mean that the client address is not visible to the nameserver, which can cause issues with NAT64, RRL, RPZ etc. There are ways round this using address re-write rules but we don\u0026rsquo;t detail that here. In future a solution like https://datatracker.ietf.org/doc/draft-bellis-dnsop-xpf/ might become standard. Nameserver config To use the following with BIND to offer a TLS service, configure BIND based on the following named.conf snippet\n This assumes BIND 9.12 which supports response padding (comment that line out if you are using an earlier version) The rncd and logging config is used to capture traffic volume stats - statistics can be dumped periodically with the \u0026lsquo;rndc stats\u0026rsquo; command  options { directory \u0026#34;/home/sinodun\u0026#34;; listen-on port 9999 { 127.0.0.1; }; allow-query { 127.0.0.1; }; tcp-clients 4000; statistics-file \u0026#34;/tmp/bind-stats\u0026#34;; dnssec-enable yes; dnssec-validation auto; response-padding { any; } block-size 468; }; Use with the following in named.conf, adjusting the allow list as needed:\nkey \u0026quot;rndc-key\u0026quot; { algorithm hmac-md5; secret \u0026quot;BIGSECRET\u0026quot;; }; controls { inet 127.0.0.1 port 9953 allow { 127.0.0.1; } keys { \u0026quot;rndc-key\u0026quot;; }; }; logging { category default { null; }; category unmatched { null; }; }; nginx.conf user www-data; worker_processes auto; pid /run/nginx.pid; events { worker_connections 1024; # multi_accept on; } stream { upstream dns_tcp_servers { server 127.0.0.1:9999; } server { listen 853 ssl; proxy_pass dns_tcp_servers; ssl_certificate /etc/nginx/lego/certificates/\u0026lt;cert\u0026gt;.crt; ssl_certificate_key /etc/nginx/lego/certificates/\u0026lt;cert\u0026gt;.key; ssl_protocols TLSv1.2; ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384; ssl_session_tickets on; ssl_session_timeout 4h; ssl_handshake_timeout 30s; } } haproxy.cfg global log /dev/log local0 chroot /var/lib/haproxy user haproxy group haproxy maxconn 1024 pidfile /var/run/haproxy.pid nbproc \u0026lt;processes\u0026gt; tune.ssl.default-dh-param 2048 ssl-default-bind-ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384 ssl-default-bind-options force-tlsv12 # Default SSL material locations ca-base /etc/ssl/certs crt-base /etc/ssl/private defaults balance roundrobin timeout http-request 10s timeout queue 1m timeout connect 10s timeout client 1m timeout server 1m timeout check 10s listen dns bind 145.100.185.15:853 ssl crt /etc/haproxy/lego/certificates/\u0026lt;cert\u0026gt;.pem mode tcp server server1 127.0.0.1:9999 For all but lightly loaded systems, you will need to tune the number of processes or threads available to HAProxy. Unlike the nginx configuration above, which specifies an automatic configuration of the number of worker processes, HAProxy needs to have these quantities set by hand. The simplest way is to set configuration item nbproc to an appropriate number; we suggest the number of threads or processes used by the nameserver. For more advanced tuning options, including setting CPU affinity, see the HAProxy documentation or this blog post.\nIf you use HAProxy and have generated your certificates from Let\u0026rsquo;s Encrypt then you need to combine the certificate chain and key into one file using a command similar to:\ncat /etc/letsencrypt/certs/000\u0026lt;N\u0026gt;_chain.pem /etc/letsencrypt/keys/\u0026lt;my_key\u0026gt;.key \u0026gt; /etc/letsencrypt/certs/\u0026lt;cert\u0026gt;.pem "
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/installation/stubby_gui_for_macos/",
	"title": "Stubby GUI for macOS",
	"tags": [],
	"description": "",
	"content": "** THIS PROJECT IS NO LONGER MAINTAINED. WORK ON A NEWER STUBBY MANAGER GUI IS IN PROGRESS, SEE Stubby Manager GUI ** An installer package for an alpha release of the StubbyManager GUI App is now available:\nThis is the 0.2.6 of the prototype Stubby GUI. It is still very much a work in progress and has only very basic functionality! It is being released at this stage to gain feedback and review from users. We welcome early testing of this application.\nStubbyManager.pkg\nSHA256 Checksum: 0b9de130ac55e02928a21f334ac5c481b092e6535445a402caa7bb165b0b3dba\nThis will overwrite any existing installation so if you have customised your Stubby configuration (either using the \u0026lsquo;Advanced\u0026rsquo; button or by directly editing the stubby.yml file then make a backup before installing!\n This version is built with  getdns version: 1.5.2 openssl version: 1.1.1b stubby version: 0.2.6  It has only been tested on Sierra and High Sierra.\nUsing the GUI When the App is first opened for the very first time, Stubby is not running at this point. It is helpful at this point to monitor the logs while first setting Stubby up - click the View the log\u0026hellip; button.\nYou will be asked at various times to authorise Stubby with your password - this is needed periodically when changing the setup and configuration.\n Starting the Stubby service Use the buttons in the top section of the dialog to:\n Start the Stubby service. At this point the service is running but the system is not sending queries to Stubby. Test the service. This performs a single query to the Stubby service to make sure it is working. If this works then move on to the next step  Using Stubby for DNS queries Check the box that says *Use Stubby DNS and then click Apply. *From this point the system will be using Stubby for all DNS queries, you should start seeing connections opening and closing in the log window as Stubby uses the default servers. With the default configuration (Strict mode) you will see the Stubby Icon in the menu bar change from greyed out to active when you make this change. It therefore indicates that all DNS queries are encrypted. If the configuration is changed to Opportunistic (see below) the icon remains greyed out since some or all queries could be sent in clear text. This will be improved in the next release to better indicate Strict vs Opportunistic mode. Currently the icon is only visible when the App is running (again, to be fixed). Note that Stubby continues to run whilst the App is closed.\nStopping Stubby Stop stop using Stubby, simply click on the Stop button at the top of the dialog. This stops the stubby service and returns the DNS settings to their defaults.\nYou can also restart the service using the Restart button if the logs indicate there is some sort of problem.\nEditing the configuration Users may want to modify the settings by changing the servers or switching to Opportunistic mode (Strict is the default). To do this click the Advanced\u0026hellip; button. This is currently just a text editor view of the stubby.yml configuration file (this will evolve to be more user friendly in future!). A syntax check is performed on the file before it is saved, a more detailed report of syntax problems is also planned.\nFor details on the contents of the file see this page Configuring Stubby.\nAfter updating the configuration the changes must be applied by clicking the Apply button!\n Revert to default If you run into problems changing the configuration (for example the window reports the configuration is not valid), Stubby can be reverted to use the default configuration by:\n clicking the Revert to default button clicking Apply  Known Issues   Stubby sometimes gives false alerts that there is a problem with the service when laptops wake from sleep.\n  Occasionally Stubby gets confused and cannot start or stop the service. A workaround for this is to close StubbyManger and then run the following from a terminal\nsudo launchctl unload /Library/LaunchDaemons/org.getdns.stubby.plist and relaunch StubbyManager app. (You may have to wait 10 minutes until the existing authorization token has expired).\n  A standard macOS certificate store is provided in the App directory, so any certificates added locally will not be available to Stubby.\n  Code StubbyManager is written in Qt. If you are interested in contributing the code is available here: https://github.com/Sinodun/stubby_manager_gui\n"
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "Installation Guides  Linux From Source     Running as a service on *nix     MacOS Homebrew     Stubby GUI for macOS     Windows installer for Stubby     "
},
{
	"uri": "http://dnsprivacy.org/ietf_dns_privacy_tutorial/",
	"title": "IETF DNS Privacy Tutorial",
	"tags": [],
	"description": "",
	"content": "IETF 99 Slides for the EDU DNS Privacy Tutorial, Sunday 16th June 2017:\nIETF_99_EDU_DNS_Privacy.pdf\nYou tube video: DNS Privacy Tutorial IETF 99\n IETF 97 The EDU Team recently held a DNS Privacy Tutorial at IETF 97 in Seoul, South Korea. Links to the slides and a video are below:\nSlides: Internet Privacy - Presented by Daniel Kahn Gillmor\nDNS Privacy - Presented by Sara Dickinson\nYouTube Video: DNS Privacy Tutorial IETF 97\n"
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/lets_encrypt_certificate_renewal/",
	"title": "Let&#39;s Encrypt Certificate renewal",
	"tags": [],
	"description": "",
	"content": "This page contains some details on how to renew certificates with Let\u0026rsquo;s Encryptusing the same key, which is very helpful in supporting authentication via a SPKI pinset.\n Generating a Key and Manual Renewal Automated renewal Generating a SPKI for your certificate    Many of the current experimental servers are using Let\u0026rsquo;s Encrypt certificates. Using cerbot makes creating an managing certificates easy.\nAs of recently cerbot no longer checks if the certificate is about to expire, but simple gets a new one. Beware when testing since with Let\u0026rsquo;s Encrypt there is a limit of 5 certificates per day\u0026hellip;.\n Generating a Key and Manual Renewal This assumes that you will use certbot in conjunction with Let\u0026rsquo;s Encrypt and you have an existing key \u0026lt;my_key_file\u0026gt; that was use to sign the previous certificate (or you are generating your first certificate).\n  Create your new CSR from your existing private key using \u0026lsquo;openssl req\u0026rsquo;\nopenssl req -key \u0026lt;my_key_file\u0026gt; -new -out \u0026lt;my_csr_file\u0026gt;   Use the certbot interface to renew the cert using the same key, for example using web authenticaiton certbot certonly -d \u0026lt;my_authentication_name\u0026gt; --csr \u0026lt;my_csr_file\u0026gt; --webroot -w /home/website/public or using dns challenge\ncertbot certonly -d \u0026lt;my_authentication_name\u0026gt; --csr \u0026lt;my_csr_file\u0026gt; --preferred-challenges dns --manual   For the dns challenge mode, step 2 outputs a TXT file that must be added to the corresponding zone \u0026lt;my_authentication_name\u0026gt; before the certificate can be issued and instructs something like:\nPlease deploy a DNS TXT record under the name _acme-challenge.\u0026lt;my_authentication_domain_name\u0026gt; with the following value: \u0026lt;TXT value\u0026gt; Once this is deployed, Press ENTER to continue   Manually add the TXT record and wait until it has propagated e.g. use dig to 8.8.8.8 to obtain the new TXT record.   hit ENTER, which should result in a new certificate being issued.   Restart the nameserver or proxy to have it use the new certification.\n    Automated renewal There are a number of ways to do this but one common one is to use https://dehydrated.de/ It is nice for automating the renewal workflow, particularly if you want to use the DNS challenge method, rather than web access. We have two examples of this method:\n Method 1 - based on the workflow at Sinodun and using Knot resolver to sign the DNS zone used for the dns-01 challenge. Method 2 - based on the workflow at NLnet Labs using OpenDNSSEC to sign the DNS zone used for the dns-01 challenge.  Generating a SPKI for your certificate Once you have the certificate configured on your server you can generate the SPKI pin if you want to publish this (so clients can configure this for authenticating your server).\n GnuTLS: gnutls-cli --print-cert -p 853 \u0026lt;IP_address\u0026gt; The pin for each certificate is displayed at the end of the output line beginning ' Certificate[0] info:'\n OpenSSL: echo | openssl s_client -connect \u0026#39;[2001:67c:27e4::35]:853\u0026#39; 2\u0026gt;/dev/null \\ | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | \\ openssl dgst -sha256 -binary | openssl enc -base64  Or use this handy website https://report-uri.io/home/pubkey_hash  "
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/installation/windows_installer_for_stubby/",
	"title": "Windows installer for Stubby",
	"tags": [],
	"description": "",
	"content": " Overview Installation  Latest stable msi and zip installers: Latest development msi and zip installers: Release notes  Version 0.4.0-a2 Version 0.4.0-a1 Version 0.3.0 Version 0.2.6 Version 0.2.5   Installer contents   Configuration Run Stubby Test Stubby Modify your upstream resolvers    Modify your upstream resolvers (Windows 7)     Install Stubby as Windows service Create a Scheduled Task Known Issues Manual update of system revolvers on Windows  Opportunistic mode      Overview Stubby can be installed\n either via the install/zip packages available on this page or  by using chocolatey: https://chocolatey.org/packages/stubby/0.4.0.0  The 0.4.0 release msi and zip files includes both the command line tool described below and also an alpha release of a Graphical Interface to manage Stubby.\n Stubby has been tested on Windows 10 and should work on Windows 8. There is limited support for Windows 7 - see below. User testing reports, bug reports and patches/pull requests are all welcomed via the Stubby github issue tracker!\n Installation The installer currently overwrites all existing files so if you have made changes to the stubby.yml then you should create a backup of this file before upgrading!\nLatest stable msi and zip installers: Latest stable installer is version 0.3.0.6 built from:\n getdns version: 1.6.0  openssl version: 1.0.2s stubby version: 0.3.0    Description File SHA256 Checksum  64bit Windows Installer stubby-0.3.0.6-x64.msi\n abc0c103d56d620ef942b48d7c3c2713638587a397baecb003644c82816a0249  32bit Windows Installer stubby-0.3.0.6-x86.msi a1afae37090c622304d4ea8ad593f277fed50b5bd2281032b4bb9522c1097e2e  Zip file with 64bit install stubby-0.3.0.6-x64.zip\n 9e6b1480bc9690d8280a921499273d85c59bc7097ff7203efc2a7ba7351df2f7   Zip file with 32bit install stubby-0.3.0.6-x86.zip\n db742031551af20d611b011dea7827a6611281d28e8b3dcada7a8cc92fa4a0bb      Latest chocolatey package is available here: https://chocolatey.org/packages/stubby/0.3.0.6\nLatest development msi and zip installers: Latest development installer is version 0.4.0-a2 built from:\n getdns version: 1.6.0  openssl version: 1.0.2s stubby version: 0.4.0rc1  NOTE: This is an alpha release!\n Description File SHA256 Checksum  64bit Windows Installer stubby-0.4.0.97-x64.msi\n 2f5cc0b783cbaf7ada2d266cac89025c52789d8406da681e017af243372e21c4\n  32bit Windows Installer stubby-0.4.0.97-x86.msi\n 7cb0d59baf1fd3049fc81eab98e4d8a83d385be09c74f0f9ea53884fb3655f91\n  Zip file with 64bit install stubby-0.4.0.97-x64.zip\n 8a7992baaa1eba171934c1c3e5539cf91d88170f0cb734a58e0f132265b2454b\n  Zip file with 32bit install stubby-0.4.0.97-x86.zip\n 35d75ecd1849590306433839fc2cd404ecadd986489f63497701e6c177c7055a\n     Release notes Version 0.4.0-a2  Significant updates to the Stubby Manager GUI - see here for details.  Version 0.4.0-a1  The msi and zip files now includes an alpha release of Stubby Manager GUI see this page for details. This installs alongside the existing install and should not interfere with existing installs. (Chocolatey package does not contain this yet.) The alpha is not feature complete and should be used with care, see Stubby Manager GUI. Stubby can now be installed as a Windows service, see this README.md for details.  Version 0.3.0  Update to use Stubby 0.3.0. This release is built with the Visual Studio toolchain. Previous releases were built with MinGW.  Version 0.2.6  Update to use Stubby 0.2.6  Version 0.2.5   Previous versions of the installer were numbered 0.0.1 to 0.0.7. From this release onward we are adopting a new policy. Installer releases will have a 4 component version a.b.c.d. a.b.c gives the Stubby version. d indicates the installer package revision, starting at 0 for the first packaging of a given Stubby version.\n  The 0.2.5.0 release now provides a 32bit install as well as a 64bit install.\n On a 64bit Windows installation, a 32bit install will place files in C:\\Program Files (x86)\\Stubby. All other installs place files in C:\\Program Files\\Stubby.    This release corrects the default configuration file location to C:\\Program Files\\Stubby\\stubby.yml. This path no longer needs to be specified on the command line.\n  stubby.bat has been updated to look for the configuration file in the same directory as the Stubby executable.\n  Installer contents These contain the following files by the installer.\nThe 0.3.0.6 release and later provides a 32bit install as well as a 64bit install. On a 64bit Windows installation, a 32bit install will place files in C:\\Program Files (x86)\\Stubby. All other installs place files in C:\\Program Files\\Stubby.\n README.txt - containing these instructions stubby.exe - binary stubby.yml - configuration file getdns_query.exe - tool for testing stubby getdns_server_mon.exe - tool for probing servers Powershell scripts for modifying system resolvers:  stubby_setdns_windows.ps1 stubby_resetdns_windows.ps1 Windows 7 versions of Powershell scripts (see below)  stubby_setdns_windows7.ps1 stubby_resetdns_windows7.ps1     Scripts to enable Stubby to be configured as a Scheduled Task  stubby.xml stubby.bat   Additional files required for the Stubby Manager GUI  Configuration It is recommended to use the default configuration file provided which will use \u0026lsquo;Strict\u0026rsquo; privacy mode and spread the DNS queries among several of the current DNS Privacy test servers. Note that this file contains both IPv4 and IPv6 addresses. It installed in \u0026ldquo;C:\\Program Files\\Stubby\\stubby.yml\u0026rdquo;\nMore information on how to customise the configuration can be found here.\nRun Stubby Simply invoke Stubby on the command line from a command prompt window (To get a command prompt go to the Windows search box and type \u0026lsquo;cmd\u0026rsquo; and then choose the \u0026lsquo;Command prompt\u0026rsquo; option)\n        \u0026gt; \u0026quot;C:\\Program Files\\Stubby\\stubby.exe\u0026quot; -l    The -l flag enables full logging. Alternatively a specific logging level can be controlled by using the -v flag (run '\u0026quot;C:\\Program Files\\Stubby\\stubby.exe\u0026quot; - h' for details of available levels).\nWe are working on support for running Stubby as a service on Windows 10. Instructions for setting up a Scheduled task are below.\nTest Stubby A quick test can be done by opening a separate Command prompt window and using getdns_query (or your favourite DNS tool) on the loopback address:\n        \u0026gt; \u0026quot;C:\\Program Files\\Stubby\\getdns_query\u0026quot; -s @127``.0.``0.1 www.example.com    You should see a status of GETDNS_RESPSTATUS_GOOD and and rcode of GETDNS_RCODE_NOERROR in the getdns_query output. You should also see a connection being made in the stubby logs.\nModify your upstream resolvers Once this change is made all your DNS queries will be re-directed to Stubby and sent over TLS! (You may need to restart some applications to have them pick up the network settings).\nFor Stubby to re-send outgoing DNS queries over TLS the recursive resolvers configured on your machine must be changed to send all the local queries to the loopback interface on which Stubby is listening.\nIn most cases your system will use the \u0026lsquo;default\u0026rsquo; DNS servers that are provided by whatever network you are on at the time. Using the two Powershell comands will be all you need to switch back and forth from Stubby to the default DNS settings for the network you are on. (The scripts don\u0026rsquo;t store any DNS config information because it can change dynamically). If you want to double check what servers you are using right now you can use then follow the instructions below to inspect your system settings. If you have reason to think your system uses specific servers on all networks it might be useful to note your existing default nameservers before making this change so you can use the same instructions to reset them!\nTo set your nameservers to use Stubby\n  From Windows search box type \u0026lsquo;cmd\u0026rsquo; and on the \u0026lsquo;Command prompt\u0026rsquo; option that appears right click and select \u0026lsquo;run as Administrator\u0026rsquo;\n  In the command prompt window that appears type the following to switch the system DNS resolvers to use Stubby.\n        PowerShell -ExecutionPolicy bypass -``file \u0026quot;C:\\Program Files\\Stubby\\stubby_setdns_windows.ps1\u0026quot;      You can monitor the DNS traffic using Wireshark watching on port 853.\nIf you encounter problems or want to turn Stubby off for any reason then reverse this change to restore the default network settings (no DNS Privacy) by running\n        PowerShell -ExecutionPolicy bypass -``file \u0026quot;C:\\Program Files\\Stubby\\stubby_resetdns_windows.ps1    Modify your upstream resolvers (Windows 7) Follow the procedure above, but use the scripts:\n C:\\Program Files\\Stubby\\stubby_setdns_windows7.ps1 and C:\\Program Files\\Stubby\\stubby_resetdns_windows7.ps1  WARNING: These scripts can only update DNS servers on the IPv4 service. IPv6 will still use the default DNS servers, sending queries in clear text so one option is to disable IPv6, the other is to manually update the IPv6 addessses (see below).\n Install Stubby as Windows service See this README.md for details.\nCreate a Scheduled Task If you want Stubby to always start when you boot your system, you can create a Scheduled task for this. A template for the task is provided.\nTo create the task just run\nschtasks /create /tn Stubby /XML \u0026#34;C:\\Program Files\\Stubby\\stubby.xml\u0026#34; /RU \u0026lt;you_user_name\u0026gt; Known Issues  We are aware of occasional issues when Windows sleeps and resumes when stubby must be restarted to work correctly.  If you get an error when trying to run Stubby that includes the words \u0026ldquo;Could not bind on given address\u0026rdquo; then retry the command from an \u0026lsquo;Administrator\u0026rsquo; Command prompt window The \u0026lsquo;-h\u0026rsquo; output of stubby.exe shows the wrong path for the installed configuration file. An issue has been opened for this. The installer currently overwrites the stubby.yml file so if changes have been made a backup should be created before upgrading  Manual update of system revolvers on Windows If you need to manually inspect or change your system revolvers on Windows through the GUI then do the following:\n Open the Control Panel Choose \u0026lsquo;Network and Internet\u0026rsquo; Choose \u0026lsquo;View network status and tasks\u0026rsquo; under \u0026lsquo;Network and Sharing Center\u0026rsquo;  Choose \u0026lsquo;Change adapter settings\u0026rsquo; from the left hand menu Then choose your interface - most likely either \u0026lsquo;Wi-fi\u0026rsquo; or \u0026lsquo;Ethernet\u0026rsquo; In the dialog that appears, click on the \u0026lsquo;Properties\u0026rsquo; button at the bottom In the list that appears double click on \u0026lsquo;Internet Protocol Version 4 (TCP/IPv4)\u0026rsquo;  You can toggle your DNS between using the default DNS servers provided by the network you are on and setting specific servers using the botton radio buttons on this page Be sure to press OK and then Close to apply the settings.    Repeat step 7 for \u0026lsquo;Internet Protocol Version 6 (TCP/IPv6)\u0026rsquo; if you have IPv6 enabled  Opportunistic mode If you have changed the default config in the stubby.yml file and are running in Opportunistic mode then you may want to add an alternative DNS server in here for robustness. However DNS queries sent to this server will be sent clear text over UDP/TCP, so this is NOT recommended for Strict mode unless required for bootstrapping (e.g. in a corporate network).\n"
},
{
	"uri": "http://dnsprivacy.org/public_resolvers/",
	"title": "Public Resolvers",
	"tags": [],
	"description": "",
	"content": "Public Resolvers The following are services that have been announced by large organisations - they support DNS Privacy on anycast networks.  DNS-over-TLS (DoT) DNS-over-HTTPS (DoH) DNS-over-QUIC (DoQ)    A comparison of the privacy polices of some resolvers is provided here.\nA list of experimental DoT test servers (including those run by the Stubby developers) is available on the Test Servers page.\n DNS-over-TLS (DoT) Details are provided in the Stubby config file for users who want to enable them.\n   Hosted by IP addresses TLS Ports Hostname for TLS\nauthentication Base 64 encoded form of SPKI pin(s) for TLS\nauthentication (RFC7858) Notes  Quad9 'secure' 9.9.9.9\n2620:fe::fe\n 853 dns.quad9.net Quad9 do NOT publish or recommend use of SPKI pins with their servers. See https://quad9.net and their FAQ for details of privacy, logging and filtering policies on the main and alternative addresses(1).\nUDP and TCP service are also available on these addresses.\n  Quad9 'insecure' 9.9.9.10\n2620:fe::10\n 853 dns.quad9.net  Cloudflare 1.1.1.1 or 1.0.0.1\n2606:4700:4700::1111 or 2606:4700:4700::1001\n 853 cloudflare-dns.com Cloudflare do NOT publish or recommend use of SPKI pins with their servers. https://blog.cloudflare.com/announcing-1111/\nhttps://blog.cloudflare.com/dns-resolver-1-1-1-1/\nPRIVACY POLICY: https://www.cloudflare.com/privacypolicy/ (section of interest Public DNS Resolver Users)\nAnd also see https://labs.apnic.net/?p=1127 for details of the APNIC/Cloudflare agreement as mentioned on the Register.\nUDP and TCP service are also available on these addresses. DNS-over-HTTPS is also available!\nNOTE: To use this service by name only (i.e resolve the IP from the name) use 1dot1dot1dot1.cloudflare-dns.com.\n  Google 8.8.8.8 or 8.8.4.42001:4860:4860::8888 or2001:4860:4860::8844\n 853 dns.google Not published Google DoT service\nGoogle Privacy policy\n  CleanBrowsing Various, see the CleanBrowsing website 853 Various, see the CleanBrowsing website Not published https://cleanbrowsing.org/privacy\nThis service provides different end points with different filters (security, family, adult) so visit the website to select the end point with the filter you prefer. NOTE: also does DoH.\n  Adguard Various, see https://adguard.com/en/blog/adguard-dns-announcement/ 853 Various, see https://adguard.com/en/blog/adguard-dns-announcement/ Not published https://adguard.com/en/adguard-dns/setup.html#instruction\nhttps://adguard.com/en/privacy.html\nThis service provides different end points with different filters (default, family) so visit the website to select the end point with the filter you prefer.\n  Comcast 96.113.151.1452001:558:fe21:6b:96:113:151:145\n 853 dot.xfinity.com Not published NOTE: This is currently a Public Beta trial. https://corporate.comcast.com/privacy\nhttps://corporate.comcast.com/stories/privacy-with-comcasts-xfinity-internet-service\n     DNS-over-HTTPS (DoH) For a more up to date list of available of DoH severs you may want to look at https://github.com/curl/curl/wiki/DNS-over-HTTPS#publicly-available-servers\nDetails of a few any cast service and privacy policies:\n   Hosted by URL Notes    Cloudflare https://cloudflare-dns.com/dns-query\n https://developers.cloudflare.com/1.1.1.1/dns-over-https/\nPRIVACY POLICY: PRIVACY POLICY: https://www.cloudflare.com/privacypolicy/ (section of interest Public DNS Resolver Users)And also see https://labs.apnic.net/?p=1127 for details of the APNIC/Cloudflare agreement as mentioned on the Register.\n  Cloudflare https://mozilla.cloudflare-dns.com/dns-query This server is announced as part of the Firefox Nightly shield study.\nIt has a different (stronger) privacy policy than the general Cloudflare DoH server above:\nhttps://developers.cloudflare.com/1.1.1.1/commitment-to-privacy/privacy-policy/firefox/\n  Google https://dns.google/dns-query RFC8484 (GET and POST)\nhttps://developers.google.com/speed/public-dns/docs/doh/\n  Quad9 Various Please see https://www.quad9.net/doh-quad9-dns-servers/ for details  CleanBrowsing Various, see the CleanBrowsing website This service provides different end points with different filters (security, family, adult) so visit the website to select the end point with the filter you prefer.  Adguard Various, see https://adguard.com/en/blog/adguard-dns-announcement/   Comcast https://doh.xfinity.com/dns-query NOTE: This is currently a Public Beta trial. https://corporate.comcast.com/privacy\nhttps://corporate.comcast.com/stories/privacy-with-comcasts-xfinity-internet-service     Google also run a DoH endpoint at https://dns.google/resolve? using a proprietary JSON API.\nDNS-over-QUIC (DoQ) AdGuard launched the first DoQ public resolver in 2020: https://adguard.com/en/blog/dns-over-quic.html\n"
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/monitoring_privacy_servers/",
	"title": "Monitoring Privacy servers",
	"tags": [],
	"description": "",
	"content": "DNS-over-TLS If you want to monitor the TLS specific or DNS Privacy specific features of a recursive server then there are a couple of options:\n A new tool getdns_server_mon is being developed which will provide output in both human readable and Nagios API compatible form. This tool was included in the 1.4.0 release of getdns.  This tool is used on the dnsprivacy.org test server monitoring page.The xml configuration for the Jenkins job is available here.    Stephane Bortzmeyer developed a standalone plugin based on getdns which inspired the above tool. His plugin is available here.  "
},
{
	"uri": "http://dnsprivacy.org/test_servers/",
	"title": "Test Servers",
	"tags": [],
	"description": "",
	"content": "Test servers  Public resolvers Experimental DNS Privacy Recursive Servers  DoH servers DoT servers  Stubby configuration Servers run by the Stubby developers Other servers with a \u0026lsquo;no logging\u0026rsquo; policy Servers with minimal logging/limitations        Public resolvers Public Resolvers: Several large organisations opereate DNS Privacy Servers - see DNS Privacy Public Resolvers\nDOH servers are also currently listed on that page\n Experimental DNS Privacy Recursive Servers Live Monitoring Dashboard\nLive Traffic Graphs\nMap of server locations\nDoH servers These are currently listed on the DNS Privacy Public Resolvers page and also the list maintained on the curl wiki. For any servers below with the note \u0026lsquo;also does DoH\u0026rsquo; check these pages or the website of the service for the DoH endpoint.\nDoT servers The following servers are experimental DNS-over-TLS servers.\nNote that they are experimental offerings (mainly by individuals/small organisations) with no guarantees on the lifetime of the service, service level provided. The level of logging may also vary (see the individual websites where available) - the information here about logging has not been verified. Also note that the single SPKI pins published here for many of these servers are subject to change (e.g on Certificate renewal) and should be used with care!!\n Stubby configuration A YAML configuration file for Stubby containing a the details of these servers is provided with Stubby and can be found here. This file enables only the subset of servers operated by the stubby/getdns developers by default, users can choose to enable any of the other servers by uncommenting the relevant section (occasionally the file lags this page).\nServers run by the Stubby developers    Hosted by IP addresses TLS Ports Hostname for TLS\nauthentication Base 64 encoded form of SPKI pin(s) for TLS\nauthentication (RFC7858) TLSA record published Logging Software Notes  1) The following are currently enabled in the default Stubby config file because they are run by the stubby/getdns developers and have no known issues.  Sinodun/Surfnet 145.100.185.152001:610:1:40ba:145:100:185:15 853443 dnsovertls.sinodun.com 62lKu9HsDVbyiPenApnc4sfmSYTHOVfFgL3pyB+cBL4= Y Traffic volume only HAProxy + BIND 9.12 See https://www.sinodun.com/recursive-operator-privacy-statement-rps/  Sinodun1/Surfnet 145.100.185.162001:610:1:40ba:145:100:185:16 853443 dnsovertls1.sinodun.com cE2ecALeE5B+urJhDrJlVFmf38cJLAvqekONvjvpqUA= Y Traffic volume only Nginx + BIND 9.12 See https://www.sinodun.com/recursive-operator-privacy-statement-rps/  getdnsapi.net 185.49.141.37\n2a04:b900:0:100::37 853 getdnsapi.net foxZRnIh9gZpWnl+zEiKa0EJ2rdCGroMWm02gaxSc9Q=\n Y Traffic volume only Unbound      Other servers with a \u0026lsquo;no logging\u0026rsquo; policy  Hosted by IP addresses TLS Ports Hostname for TLS\nauthentication Base 64 encoded form of SPKI pin(s) for TLS\nauthentication (RFC7858) TLSA record published Logging Software Notes  UncensoredDNS 89.233.43.71 2a01:3a0:53:53::0 853 unicast.censurfridns.dk wikE3jYAA6jQmXYTr/rbHeEPmC78dQwZbQp6WdrseEs=(also see this file for a full set of pins) Y Traffic volume only  See https://blog.uncensoreddns.org/  Fondation RESTENA\n(NREN for Luxemburg)\n 158.64.1.29\n2001:a18:1::29\n 853 kaitain.restena.lu 7ftvIkA+UeN/ktVkovd/7rPZ6mbkhVI7/8HnFJIiLa4=  Traffic volume only Unbound Configured with qname-minimisation, use-caps-for-id, aggressive-nsec, prefetch, harden-below-nxdomain and the newest auth-zone for local root\nzone caching.\n  Sinodun3/Surfnet 145.100.185.182001:610:1:40ba:145:100:185:18 853 dnsovertls3.sinodun.com 5SpFz7JEPzF71hditH1v2dBhSErPUMcLPJx1uk2svT8= Y Traffic volume only HAProxy + BIND 9.12 See https://www.sinodun.com/recursive-operator-privacy-statement-rps/  Sinodun4/Surfnet 145.100.185.172001:610:1:40ba:145:100:185:17 853 dnsovertls2.sinodun.com NAXBESvpjZMnPWQcrxa2KFIkHV/pDEIjRkA3hLWogSg= Y Traffic volume only Knot Resolver See https://www.sinodun.com/recursive-operator-privacy-statement-rps/  dkg 199.58.81.218\n2001:470:1c:76d::53 853 443 dns.cmrg.net 3IOHSS48KOc/zlkKGtI46a9TY9PPKDVGhE3W2ZS4JZo=\n5zFN3smRPuHIlM/8L+hANt99LW26T97RFHqHv90awjo=  None Knot Resolver See https://dns.cmrg.net/ Note that on port 443 this server can serve both HTTP 1.1 traffic (to securely access the nameserver credentials) on TLS connections and DNS-over-TLS on separate TLS connections due to some nifty, experimental demultiplexing of traffic, described here.Has some issues with DNSSEC responses - this is under investigation.  Lorraine Data Network 80.67.188.1882001:913::8 853\n443  WaG0kHUS5N/ny0labz85HZg+v+f0b/UQ73IZjFep0nM=  Traffic volume only stunnel 4 + BIND See https://ldn-fai.net/serveur-dns-recursif-ouvert/ (note, logging of IP address at stunnel no longer performed).\nA self-signed certificate is used, so SPKI pinning is must be used.  dns.neutopia.org 89.234.186.1122a00:5884:8209::2 853\n443 dns.neutopia.org wTeXHM8aczvhRSi0cv2qOXkXInoDU+2C+M8MpRyT3OI=  No logging Knot resolver   BlahDNS 108.61.201.119\n2001:19f0:7001:1ded:5400:01ff:fe90:945b 853\n443\n dot-jp.blahdns.com   No logging  https://blahdns.com/\nNOTE1: Located in Japan. Also does DoH.\nNOTE2: Note that port 443 REQUIRES an authentication name\nUPDATED 22nd JAN 2018: note the authentication name has changed\n  BlahDNS 159.69.198.101\n2a01:4f8:1c1c:6b4b::1 853\n443\n dot-de.blahdns.com   No logging  https://blahdns.com/\nNOTE1: Located in Frankfurt. Also does DoH.NOTE2: Note that port 443 REQUIRES an authentication name\n  Go6Lab 2001:67c:27e4::35 853 privacydns.go6lab.si g5lqtwHia/plKqWU/Fe2Woh4+7MO3d0JYqYJpj/iYAw=  No logging Unbound   Secure DNS Project by PumpleX 51.38.83.1412001:41d0:801:2000::d64 853 dns.oszx.co P/Auj1pm8MiUpeIxGcrEuMJOQV+pgPY0MR4awpclvT4=  No logging  https://dns.oszx.co\nNOTE1: Also does DoH and dnscrypt\nNOTE2: Performs ad blocking  Foundation for Applied Privacy 146.255.56.98\n2a01:4f8:c0c:83ed::1 853\n443\n dot1.applied-privacy.net  Y Only aggregated logging, no PII unbound DETAILS UPDATED 14th Sep 2020\nhttps://appliedprivacy.net/services/dns/\nNOTE: Also does DoH and has an .onion endpoint\n  ibksturm.synology.me 178.82.102.190\n 853 ibksturm.synology.me   No logging nginx + unbound https://github.com/ibksturm/dnscrypt-switzerland\nNOTE: Also does DoH and dnscrypt\nno filters, opennic root copy\n  dismail.de 159.69.114.1572a01:4f8:c17:739a::2  853 fdns2.dismail.de yJYDim2Wb6tbxUB3yA5ElU/FsRZZhyMXye8sXhKEd1w=  No logging  https://dismail.de/info.html#dns  dismail.de 80.241.218.682a02:c205:3001:4558::1 853 fdns1.dismail.de MMi3E2HZr5A5GL+badqe3tzEPCB00+OmApZqJakbqUU=  No logging  https://dismail.de/info.html#dns     Servers with minimal logging/limitations These servers use some logging, self-signed certs or no support for Strict mode.    Hosted by IP addresses TLS Ports Hostname for TLS\nauthentication Base 64 encoded form of SPKI pin(s) for TLS\nauthentication (RFC7858) TLSA record published Logging Software Notes  NIC Chile\n 200.1.123.46\n2001:1398:1:0:200:1:123:46 853 dnsotls.lab.nic.cl pUd9cZpbm9H8ws0tB55m9BXW4TrD4GZfBAB0ppCziBg= Y Yes, for research purposes Unbound Details updated 18th Sept - now uses Let's encrypt cert     "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/best_current_practices/",
	"title": "Best Current Practices",
	"tags": [],
	"description": "",
	"content": "A Best Current Practices document for operators of DNS privacy services had been developed in the IETF. (Thanks to the Open Technology Fund for supporting the work on this by dnspivacy.org)\nThe document is available here: BCP232\nIt includes sections on:\n Recommendations for threat mitigations  One the wire (i.e. stub to resolver) Data at rest (e.g. logs of traffic) Data sent upstream (queries and data shared with third parties)   Content for a DNS Privacy Policy and Practice Statement A review of existing pseudonymization and anonymization techniques for IP adresses A comparison of the policies and practice of Google PublicDNS, Cloudflare, Quad9 and OpenDNS  Some of the research that was done as background for this draft is also published here:\n Data minimisation of network traffic Comparison of several policy and practice statements  "
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_clients/",
	"title": "DNS Privacy Clients",
	"tags": [],
	"description": "",
	"content": "DNS Privacy Clients  DOT  Operating systems Local forwarders  Stubby Unbound Unbound/Stubby combination Knot resolver Bind   Mobile Routers Browsers Command line clients  getdns  LDNS (drill) 1.6.17 kdig     DoH  Desktop Mobile Browser   DoQ  Desktop/mobile      DOT Operating systems As of release 239 systemd-resolved now supports opportunistic DNS-over-TLS - see the resolved.conf man page. The release notes say:\n systemd-resolved now supports DNS-over-TLS. It\u0026rsquo;s still turned off by default, use DNSOverTLS=opportunistic to turn it on in resolved.conf. We intend to make this the default as soon as couple of additional techniques for optimizing the initial latency caused by establishing a TLS/TCP connection are implemented.\n However see this ISOC article on some issues with this implementation.\nLocal forwarders Stubby Recommended: See the DNS Privacy Daemon - Stubby web page for how to use Stubby as a local DNS Privacy stub resolver on your desktop or laptop!\n Unbound Unbound can be run as a local caching forwarder, configured to use SSL upstream, however it cannot yet send several of the privacy related options (padding, ECS privacy) etc. The 1.7.1 release of Unbound supports authentication of upstream recursive resolvers using an authentication domain name (i.e. PKIX authentication) if a certificate bundle is configured. The 1.13.1 release can re-use upstream connections. An example minimal config is given below.\nNOTE:\n This uses Cloudflare for simplicity and testing purposes, modify this to the resolver of your choice from e.g. the stubby config file! Update the path to the cert bundle to a locally installed cert.pem file so that connections can be authenticated. The path will depend on your OS and installation.  server: directory: \u0026#34;/etc/unbound\u0026#34; username: unbound chroot: \u0026#34;/etc/unbound\u0026#34; # logfile: \u0026#34;/etc/unbound/unbound.log\u0026#34; #uncomment to use logfile. pidfile: \u0026#34;/etc/unbound/unbound.pid\u0026#34; # verbosity: 1 ## uncomment and increase to get more logging. # listen on local host, port 53 interface: 127.0.0.1@53 interface: 0::1@53 prefetch: yes hide-identity: yes hide-version: yes do-not-query-localhost: no # specifiy a path to a local certificate bundle to authenticate connections tls-cert-bundle: \u0026#34;/etc/ssl/cert.pem\u0026#34; forward-zone: name: \u0026#34;.\u0026#34; forward-addr: 1.1.1.1@853#cloudflare-dns.com forward-tls-upstream: yes Unbound/Stubby combination Some user combine Unbound (as a caching proxy with other features such as DNS Blacklisting) and Stubby (as fully featured TLS forwarder).\nMatthew Vance has developed a docker solution that sets this configuration up.\n Or, if you want to set this up yourself, an example config for this is:\nUnbound config\nserver: use-syslog: yes username: \u0026#34;unbound\u0026#34; directory: \u0026#34;/etc/unbound\u0026#34; trust-anchor-file: trusted-key.key root-hints: \u0026#34;/etc/unbound/root.hints\u0026#34; do-not-query-localhost: no forward-zone: name: \u0026#34;.\u0026#34; forward-addr: 127.0.0.1@8053 forward-addr: ::1@8053 Stubby config\nresolution_type: GETDNS_RESOLUTION_STUB dns_transport_list: - GETDNS_TRANSPORT_TLS tls_authentication: GETDNS_AUTHENTICATION_REQUIRED tls_query_padding_blocksize: 256 edns_client_subnet_private : 1 idle_timeout: 10000 listen_addresses: - 127.0.0.1@8053 - 0::1@8053 round_robin_upstreams: 1 upstream_recursive_servers: ... Knot resolver As of the 2.0.0 release knot resolver can also forward queries over TLS!\nBind Bind does not support TLS natively but can be configured to run behind a local TLS proxy such as stunnel.\nLars de Bruin has kindly created a docker image which uses BIND as a caching local resolver with Stubby as a TLS forwarder.\n Mobile  |     Platform Status     Android Android supports DNS-over-TLS in the Android P Developer Preview. Also see this talkgiven by the Android developers at NDSS DNS Privacy workshop 2018: Video, Slides    Quad 9 has an App: Quad9 Connect   iOS Work in underway on a Stubby iOS app, however it is currently blocked by an implementation restriction.    Cloudflare has an app call 1.1.1.1 - it does DoH by default but will also do DoT but only uses 1.1.1.1    Routers  Set up DNS-over-TLS forwarding on a Turris router OpenWRT (LEDE)  Asuswrt-Merlin  GitHub Repo: https://github.com/Xentrk/Stubby-Installer-Asuswrt-Merlin Support Forum: https://www.snbforums.com/threads/stubby-installer-asuswrt-merlin.49469/ For information on how the settings were derived at, see the blog post at: https://x3mtek.com/dns-over-tls-with-dnsmasq-and-stubby-on-asuswrt-merlin/    Browsers Tenta is a browser for Android that encrypts DNS queries using DNS-over-TLS\nCommand line clients If you want a DNS Privacy enabled command line tool or a library then choose from one of the following:\ngetdns   Website  getdns supports multiple features related to DNS privacy including persistent connections, strict and opportunistic privacy profiles and TLS authentication by hostname of SPKI pinset   API spec: https://getdnsapi.net/spec.html Source: https://github.com/getdnsapi/getdns  See the first few sections on the DNS Privacy Daemon - Stubby page for instructions on how to install and build getdns as a local stub resolver with TLS support from source.   API: Use the api directly via C or any of the available language bindings (Python, Java, nodejs, PHP) getdns_query: Use API directly, or use with the wrapper script getdns_query (run \u0026lsquo;make getdns_query\u0026rsquo; then getdns_query is found in the test directory):   - getdns_query @\\\u0026lt;serverIP\u0026gt; -s -a -A -l T (Pipelined TCP queries) - getdns_query @\\\u0026lt;serverIP\u0026gt; -s -a -A -l L (Pipelined TLS queries) - getdns_query @\\\u0026lt;serverIP\u0026gt; -s -a -A -l LT (Pipelined TLS queries with fallback to TCP) - getdns_query @\\~ -s -a -A -l L -m (Pipelined TLS queries in strict mode using server hostname for authentication)  Daemon mode: see the DNS Privacy Daemon - Stubby page  LDNS (drill) 1.6.17 Source: ldns 1.6.17 source code available from this link to NLNet Labs: ldns-1.6.7\nPatch: Grab and apply the patch to ldns-1.6.17 from out git repository. Also see the notes here.\nQuery: To query this with drill use: (the IP address is used here simply to stop the server name resolution falling back to TCP because your local resolver doesn\u0026rsquo;t support DNS-over-TLS).\n* drill -t @\u0026lt;serverIP\u0026gt; \u0026lt;query name\u0026gt; (to see TCP query) * drill -l -p1021 @\u0026lt;serverIP\u0026gt; \u0026lt;query name\u0026gt; (to see TLS query) * drill -C @\u0026lt;serverIP\u0026gt; \u0026lt;query name\u0026gt; (to see STARTTLS query) * drill -C -D @\u0026lt;serverIP\u0026gt; \u0026lt;query name\u0026gt; (to do a DNSSEC lookup using STARTTLS) kdig See https://knot.readthedocs.io/en/stable/man_kdig.html\nDoH Desktop  Cloudflare have release two tools to provide DOH clients, see https://developers.cloudflare.com/1.1.1.1/dns-over-https/cloudflared-proxy/ Frank Denis has a dnscrypt-proxy (client proxy) that supports DoH, and there is a Windows client GUI called Simple DNSCrypt curl also supports DoH https://github.com/curl/doh kdig also supports DoH since version 3.0  Mobile  There is an Android App called \u0026lsquo;Intra\u0026rsquo; which can be used to send all queries from the device over DOH to either Cloudflare or Google or a user configured resolver Cloudflare has an app call 1.1.1.1 - it does DoH by default but will also do DoT but only uses 1.1.1.1  Browser  Firefox  Firefox 64.0 includes a configuration option where the URL of a DOH server can be specified and then all queries sent by Firefox will go to that server over DOH.  It can be turned on in \u0026lsquo;Opportunistic mode\u0026rsquo; via the Firefox-\u0026gt;Preferences→Network Settings→Settings dialog (scroll to bottom to find the \u0026lsquo;Enable DNS-over-HTTP\u0026rsquo; check box and URL).    Here are more details ofhow it works and how to do more complex configuration e.g. strict mode If you want to see the queries on the wire that Firefox is sending you need to export the master key secrets and then import them into wireshark.  Documentation on the key format is here: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Key_Log_Format See this Sharkfest presentation for more details (note Wireshark 3.0 supports DoH)     Bromite (https://www.bromite.org/)  What is Bromite? It is a fork of Chromium (https://www.chromium.org/): \u0026ldquo;Bromite is Chromium plus ad blocking and privacy enhancements; take back your browser! Bromite aims at providing a no-clutter browsing experience without privacy-invasive features and with the addition of a fast ad-blocking engine.\u0026rdquo; Note that at the moment Bromite is only for Android, it currently does not provide builds for desktop. In release 67.0.3396.88 Bromite has enabled the underlying DoH implementation in Chromium by exposing configuration options (via chrome://flags). Today the choice is either Google or Cloudflare DoH servers but it is up to the user to choose: https://github.com/bromite/bromite/wiki/Enabling-DNS-over-HTTPS   Chrome   Chrome has a full DoH implementation but the configuration for it is not exposed. However if you want to try it out use something like the following example for macOS:\n/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --enable-features=\u0026#34;dns-over-https\u0026lt;DoHTrial\u0026#34; --force-fieldtrials=\u0026#34;DoHTrial/Group1\u0026#34; --force-fieldtrial-params=\u0026#34;DoHTrial.Group1:server/https%3A%2F%2Fcloudflare-dns%2Ecom%2Fdns-query/method/POST\u0026#34;     DoQ Desktop/mobile AdGuard\u0026rsquo;s dnsproxy supports DoQ, also see AdGuardHome\n"
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/",
	"title": "DNS Privacy Daemon - Stubby",
	"tags": [],
	"description": "",
	"content": "DNS Privacy Daemon - Stubby  Key Features Source Code  Lastest release   Installation    Packages Installation Guides Docker Images Mobile     Configuration Support How can I contribute to the getdns/Stubby projects? Other options    \u0026lsquo;Stubby\u0026rsquo; is an application that acts as a local DNS Privacy stub resolver (using DNS-over-TLS). Stubby encrypts DNS queries sent from a client machine (desktop or laptop) to a DNS Privacy resolver increasing end user privacy.\n Stubby is developed under the getdns project, has it\u0026rsquo;s own github repo and issue tracker but dnsprivacy.org currently hosts the online documentation for Stubby. For more background and FAQ see our About Stubby page.\n The command line version of Stubby is suitable for technical/advanced users. Work on more a user friendly GUI called Stubby Manager is underway - see below! Why Use Stubby?\nRead about the problem with DNS Privacy and how Stubby helps\nKey Features  Runs as a daemon listening on the loopback addresses (127.0.0.1, ::0)  Sends all outgoing DNS queries received on those addresses out over TLS Uses a default configuration which provides Strict Privacy and uses a subset of the available DNS Privacy servers Has additional servers available for activation in the configuration file (e.g. Cloudflare, Quad9)  Stubby uses getdns, it is recommended to use at least the 1.6 release of getdns, and preferably the latest getdns stable release.\nA future release of Stubby is expected to support the following:\n DNS-over-HTTPS (DOH) Configuration of servers using authentication name only  Source Code As of August 2017 Stubby has moved to its own repository and getdns is a library dependancy!\nSource code is available on github: https://github.com/getdnsapi/stubby\nLastest release See the Stubby github repo for the latest release tarball or the getdns releases page.\nInstallation Packages Various packages are available, see repology for Stubby. Note1: A debian package is also available but doesn\u0026rsquo;t show up in the above because the version number is currently incorrect (it picks up the getdns version, not the stubby version). Working to fix this!\nNote2: The chocolatey package called \u0026lsquo;stubby\u0026rsquo; as of March 2019 is for Stubby - the name was previously used for a package named stubby4net but that has now been renamed to stubby4net.\nInstallation Guides  Linux  Build from source Running a service Great tutorial on using stubby on Ubuntu desktop - thanks linuxbabe.com!   macOS  Homebrew Stubby Manager GUI (prototype) for macOS (note, this project is no longer maintained. Support for macOS in the new Stubby Manager GUI is a work in progress).   Windows  Windows installer for command line Stubby (MSI, zip file and Chocolatey package available) Windows installer for Stubby Manager GUI (development release)    Docker Images  See this tweet for an example of using Stubby + Quad9 See this link for an example of using BIND as a local caching forwarder and stubby for upstream TLS  Mobile We hope to have support on mobile platforms in the future:\n WIP on an iPhone App  Note that Android has announced that it will support a native implementation of DNS-over-TLS in an upcoming official release (it is already available in developer releases). This does not share any code with Stubby but we applaud Android for this development!\nConfiguration See our Stubby configuration guide.\nNote that some users use Stubby in combination wtih Unbound - Unbound provides a local cache and Stubby manages the upstream TLS connections (since Unbound cannot yet re-use TCP/TLS connections). And example configuration is available on this page.\nSupport Bugs or feature requests can be directed to either\n MAILING LIST: thegetdns users mailing list BUG TRACKER: the Stubby github issue tracker  How can I contribute to the getdns/Stubby projects?  Run and test stubby. Give feedback and report bugs! Contribute code to or https://github.com/getdnsapi/stubby or https://github.com/getdnsapi/getdns Running a DNS privacy resolver  Other options See DNS Privacy Clients.\n"
},
{
	"uri": "http://dnsprivacy.org/implementation_status/",
	"title": "Implementation Status",
	"tags": [],
	"description": "",
	"content": "Implemenation status  DoT Implementation Status  Clients/Forwarders Servers Other implementation work   Recursive to Authoritative DoT DoH Implementation status DoQ Implementation status XFR/XoT Implementation status     DoT Implementation Status This table lists the best understanding of the current status of DNS-over-TLS related features in the latest stable releases of a selection of standalone open source DNS software. Also see DNS Privacy Clients for a full list of OS, mobile apps, routers and browsers that support DoT.\n If there are errors or glaring omission please email sara@sinodun.com Also see guides on how to use NGINX and other proxies to provide DNS-over-TLS, also see here. This works with a couple of provisos:\n(1) Be aware that a client will think it is talking to a DNS-over-TLS server and so may keep connections open when idle even when not using EDNS0 Keepalive (as allowed by RFC7858 ). The nameserver will see only TCP connections which were historically used just for one-shot TCP and may not be robust to many long-lived connections.\n(2) Therefore this will work much better if the nameserver has robust TCP capabilities (as described in Sections 6.2.2 and 10 of RFC7766), and would be required for production level service. Any server that fully implements EDNS0 Keepalive (RFC7828) should meet this criteria.\n See the DNS Privacy Reference Material page for more details on the individual features. Clients/Forwarders    Mode Stub      Caching forwarder/proxy        Software ldns (drill) digit getdns (Stubby) BIND (dig) Go DNS Knot (kdig) Unbound BIND Knot Res dndist   Send ECS with SOURCE PREFIX-LENGTH value of 0   Y Y  Y       TCP fast open (a) P Y Y    Y Y  Y   Connection reuse (Q/R, Q/R, Q/R) P Y Y Y Y Y Y Y Y Y   Pipelining of queries(Q,Q,Q,R,R,R) n/a Y Y Y Y Y Y Y Y Y   Process OOOR (Q1,Q2,R2,R1) n/a Y Y Y W W Y Y Y    EDNS0 Keepalive (b)   Y Y    (c)     TLS encryption (Port 853) P Y Y  Y Y Y Y Y    TLS authentication   Y   Y Y Y Y    EDNS0 Padding  Y Y Y  Y Y Y     TLS DNSSEC Chain Extension (e)              Servers    Mode Load Balancer Recursive      Auth        Software dnsdist Unbound BIND Knot Res PowerDNS Recursive CoreDNS(e) Tenta(e) NSD BIND Knot Auth PowerDNS Auth   QNAME minimisation n/a Y Y Y Y      Y   TCP fast open(a) Y Y Y Y Y   Y Y Y    Process Pipelined queries Y Y Y Y Y   Y Y Y    Provide OOOR (d) Y Y Y Y   n/a n/a n/a    EDNS0 Keepalive(b)  Y Y Y     Y     TLS encryption (Port 853) Y Y Y Y  Y Y Y      Provide TLS auth credentials Y Y Y Y  Y Y       EDNS0 Padding (basic)  Y Y Y (f)    Y     TLS DNSSEC Chain Extension(e)               KEY:\n Y - indicates latest release already supports this functionality P - indicates that a patch is available in our git repo. See here for details: DNS-over-TLS patches W - indicates work in progress, or availabe in next release  (a) not yet available on Windows (b) Implies robust TCP connection management (see RFC7828 and RFC7766)\n(c) Can be added to queries but the response is currently ignored.\n(d) Supports OOOR but could be limited by the nameserver or configuration used for recursion.\n(e) RFC9102 Note this draft was published via the Independent Stream.\n(f) This option adds padding to clear text queries to support running behind a DoT/DoH proxy such as dnsdist\nNote pipelining and OOOP are not applicable for synchronous applications. Other implementation work  There is also a RUST implementation of a DNS client/server in development that supports DNS-over-TLS. Also see the Technitium DNS Server project project (supports DoT and DoT), source code is on Github).  Recursive to Authoritative DoT PowerDNS Recursor has experimental code to test recursive to authoritative DoT (see the dot-to-auth-names/dot-to-port-853 options)\nDoH Implementation status See the list of implementations maintained on the curl github site: (1) Browsers and Clients.\n(2) Tools including various proxies (client and server) e.g dnscrypt-proxy, Facebooks experimental DoH proxy\n  We also maintain a list ofsome DoH clients (includes web browsers) And below is the state of DoH implementation is well know open-source DNS recursive resolvers/load-balancers     Mode Load Balancer Recursive       Software dnsdist Unbound BIND Knot Res   DoH support Y Y WIP (Q4 2021) Y    DoQ Implementation status AdGuard provide client and server side tools. For a full list of implementations see: Implementation status.\nXFR/XoT Implementation status This table is a work in progress - please notify us it updates/corrections are needed\n This table reflects some of the current behaviour on implementations and also some features proposed in RFC9103. It is noted that some name servers will behave differently when starting up and first loading zones to steady state behaviour.  Feature  BIND NSD Knot Auth PowerDNS  Features applicable to Secondary Sec Pri Sec Pri Sec Pri Sec Pri  TCP: Typically performs AXFRs for different\nzones in parallel to the same primary using\nseparate connections (in steady state)\n Y\n  Y\n  Y\n  Y\n   TCP: Typically performs IXFRs in parallel to AXFRs\nto the same primary using\nseparate connections (in steady state) Y\n  Y\n  Y\n  Y\n   TCP: Connection re-use for XFRs\nto same primary is possible   (a)       TCP: When re-using connections, will pipeline\nall XFR requests    Y\n       Handle empty AXFR responses  NT\n  NT\n  NT\n  NT\n  NT\n  NT\n  NT\n  NT\n  Supports XoT (g)  (f)       Feature applicable to Primary          Handle pipelined XFR requests on one\nconnection for different zones\n  Y\n  Y(b)  Y\n  Y\n  Always sends AXFR responses for different zones serially\non the same connection (not intermingled)  Y\n  Y\n  Y\n  Y\n  Sends all AXFR/IXFR responses serially\non the same connection\n  (d)  (b)      Handle sequential XFR requests on one\nconnection for the same zone  Y\n  (c)  Y\n  Y\n            Default size of XFR response  ~20kB  16kB  Up to\n65kB\n  4-8kB  Explicit configuration limit on num of concurrent XFRs  Y\n  (e)  (e)  (e)  Supports XoT (g)            KEY:\n Y - indicates latest release supports this functionality NT - not tested yet, or cannot be tested.  (a) Current release will re-use connections if the max outgoing TPC connections is hit. This PR provides a configuration option to make that behaviour the default.\n(b) NSD does not support IXFR as a primary\n(c) Because NSD requires a reload to update a zone, an old version of the zone will currently be sent on a TCP connection opened before the reload. A fix/workaournd is proposed.\n(d) e.g. If BIND receives an IXFR request whilst sending a large AXFR response, it will send the IXFR response immediately intermingled with the AXFR response.\n(e) Whilst there is no limit explicitly for XFRs, the primary has a configuration option to limit the total number of incoming TCP connections\n(defaults for relevant limits are: BIND - 25, NSD - 100, Knot - one half of the file descriptor limit for the server process, - PowerDNS 20\n(f) See the PR.\n(g) See this issue for progress. Support was added in development release 9.17.10\n"
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/",
	"title": "Running a DNS Privacy server",
	"tags": [],
	"description": "",
	"content": "Running a DNS Privacy Server If you are interested in running your own DoT or DoH server this page provides some ideas. If you have specific questions feel free to email sara@sinodun.com\n Contributing to the project  Pick your software   DoT Nameserver Configuration DoH Nameserver Configuration Read up on Best Current practices Does my DoT server need a X.509 certificate? Test your DoT server Monitor your DoT server Benchmarking of DoT    Contributing to the project We welcome and are keen to support anyone who would like to run an open DNS Privacy Server and make the server details available to the DNS Privacy project. For an overview of why DNS Privacy is important, please see DNS Privacy - The Problem. The current list of servers is available here DNS Privacy Test Servers and DNS Public Resolvers.\nWhile there are now several large organisations offering DNS Privacy services we encourage operators to run their on DNS Privacy servers to provide user choice. We recommend reading the Internet Draft on Best Current Practices for DNS Privacy Operators in order to try to provide a good, secure and private service for users. The document is a work in progress - feedback and comments welcome!\nWe are also very keen to increase the number and geographical distribution of the available servers to better serve the global population of users for whom DNS Privacy is important. Most of the servers are currently based in Europe (a few in North America, a few elsewhere) which means users in other parts of the world may be blocked from accessing them but are also likely to experience poor performance (high latency) for DNS queries. We see a particular need for DNS Privacy servers in areas such as the Middle East, Africa and Asia to enable activists and journalist local access to DNS Privacy services.\nPick your software See the Implementations page to see what features are currently supported in the various open source nameserver implementations.\n Don\u0026rsquo;t forget that you can also run a TLS-proxy in front of any nameserver to offer DoT (and there is a Docker image for doing this with BIND). We\u0026rsquo;ve also added a description of how to build HAProxy with TLS 1.3 support.  Also see the video and slides of the great talk given by Colin Petrie at RIPE76 of his analysis of current software and experience of setting up DNS-over-TLS.\n DoT Nameserver Configuration Example configurations can be found on this site for DNS-over-TLS\n Running a TLS Proxy Unbound Knot resolver How to setup dnsdist for DoT  DoH Nameserver Configuration One good reference for available DoH implementations is https://github.com/curl/curl/wiki/DNS-over-HTTPS\n How to setup dnsdist for DoH How to set up a DNSCrypt server  Read up on Best Current practices A best current practice document for DNS privacy operators is under development, see BCP for DNS privacy operators for more details.\nDoes my DoT server need a X.509 certificate? In order to allow users to authenticate the server (for \u0026lsquo;Strict\u0026rsquo; mode) the server needs to be configured with a X.509 certificate. This is optional but recommended.\n Many of the existing servers use the great service at Let\u0026rsquo;s Encrypt to obtain certificates. See our how-to guide on using Let\u0026rsquo;s Encrypt.  If you do this then it is helpful to also provide the pinset for the certificate (the SHA-256 fingerprint of the public key) as an alternative validation mechanism. See how to generate an SPKI pinset from a certificate. If you do this then it is also recommended to  Use the same key(s) when renewing the certificate to avoid having to manage key rollovers see:  Short guide on Let\u0026rsquo;s Encrypt Key renewal. This includes guides to automating renewal.   Provide 2 keys to enable key roll should you need to roll your keys    Note that If you run a server which offers more than one certificate (e.g. via a proxy which uses SNI to route traffic) be aware that SPKI only authentication of the upstream can be limited. Because no SNI is provided when the client is performing SPKI only authentication it is limited to working (by many TLS library client implementations) for only the first certificate returned.\n Test your DoT server If you want to test connectivity to your nameserver from an external source you can use the getdns query webpage:\n Enter a domain name to query for in the top box Check the \u0026lsquo;return_call_reporting\u0026rsquo; in the Extensions box Select \u0026lsquo;TLS\u0026rsquo; as the transport in the Transport box and enter the IP address and optionally the Authentication domain name for your server  Hit Query The output will contain a section at the top called \u0026lsquo;call_reporting\u0026rsquo; which include the following fields   \u0026ldquo;transport\u0026rdquo;: GETDNS_TRANSPORT_TLS to confirm the query worked over TLS\n  tls_auth_status\u0026quot;: \u0026lt;bindata of \u0026ldquo;Success\u0026rdquo;\u0026gt; if the certificate was successfully authenticated\n  \u0026ldquo;run_time/ms\u0026rdquo;: 215 response time from the query server which is based in the Netherlands\n    You can also use various command line tools:\n the getdns_query command line tool available as part of getdns or stubby kdig tool available with Knot resolver   Monitor your DoT server Stephane Bortzmeyer has written a basic Nagios plugin to monitor DNS-over-TLS servers using getdns which is available in github. We use it to provide a dashboard of the available Privacy servers. Benchmarking of DoT A fork of dnsperf now exists that supports TCP and TLS .\n"
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_reference_material/",
	"title": "DNS Privacy Reference Material",
	"tags": [],
	"description": "",
	"content": " Relevant Internet Drafts and RFCs Selection of Presentations Technical reports    Relevant Internet Drafts and RFCs DPRIVE - see the DPRIVE document website\n     draft-ietf-dprive-bcp-op-00 Recommendations for DNS Privacy Service Operators Describes Best Current Practices for operators of DoT and DoH servers\nin terms of protocol, service and privacy policy considerations.  RFC7626 DNS Privacy Considerations This document describes the privacy issues associated with the use\nof the DNS by Internet users. It is intended to be an analysis of the\npresent situation and does not prescribe solutions.\n  RFC7858 Specification for DNS over TLS This document describes the use of TLS to provide privacy for DNS.\n  RFC7830 The EDNS(0) Padding Option his document specifies the EDNS(0) 'Padding' option, which allows\nDNS clients and servers to pad request and response messages by a\nvariable number of octets.\n  RFC8467 Padding Policy for EDNS(0) Specifies the preferred algorithm for padding with the option defined in RFC7830  RFC8310 Usage Profiles for DNS over TLS and DNS over DTLS This document describes how a DNS client can use a domain name to authenticate a DNS server that uses Transport Layer Security (TLS) and Datagram TLS (DTLS). Additionally, it defines (D)TLS profiles for DNS clients and servers implementing DNS-over-TLS and DNS-over- DTLS  RFC8094 Specification for DNS over Datagram Transport Layer Security (DTLS)   draft-ietf-dprive-eval Evaluation of Privacy for DNS Private Exchange (expired) This document describes methods for measuring the\nperformance of DNS privacy mechanisms, particularly it provides\nmethods for measuring effectiveness in the face of pervasive\nmonitoring as defined in RFC7258.\n     DNSOP      RFC7766 DNS Transport over TCP - Implementation Requirements This document specifies the requirement for support of TCP as a transport\nprotocol for DNS implementations and provides guidelines towards\nDNS-over-TCP performance on par with that of DNS-over-UDP.\n  RFC7816 DNS Query Name Minimisation to Improve Privacy   RFC7828 The edns-tcp-keepalive EDNS0 Option This document defines an EDNS0 option (\"edns-tcp-keepalive\")\nthat allows DNS clients and servers to signal their respective\nreadiness to conduct multiple DNS transactions over individual TCP sessions.      DOH      RFC8484 DNS Queries over HTTPS (DoH) Document describing the protocol aspects of running DNS over HTTPS.     Other\n         RFC5246 The Transport Layer Security (TLS) Protocol    RFC7525 Recommendations for Secure Use of TLS and DTLS   RFC7413 TCP Fastopen    Selection of Presentations Also see the DNS Privacy Workshop pages!\n OARC 29  Where will encrypted DNS transports push DNS operators?- Slides, Video   RIPE 77  It\u0026rsquo;s DNS Jim, But Not as We Know It - Slides, Video DNS Privacy measurements (Benchmarking DoT) - Slides, Video   ICANN DNS Symposium 2018   \u0026lsquo;Where\u0026rsquo;s my DNS?\u0026rsquo; (video)**\n**   RIPE 76  Measurements on DNS Privacy (DNS-over-TCP and TLS benchmarking) BCOP WG - DNS Privacy PCP Dude, where\u0026rsquo;s my DNS? (subtitle \u0026lsquo;DNS-over-HTTPS is coming!')   FOSDEM 2018  ** Willem Toorop on Stub resolvers\n**   OARC 27  DNS Privacy clients. You tube video.   JCSA 2017  Hands on with getdns   IETF 99 EDU Privacy Tutorial  DNS Privacy Tutorial (Sara Dickinson, Daniel Kahn Gillmor)   **RIPE 72 **  DNS Privacy Public Resolver discussion (Sara Dickinson)   IETF 94:  DNS-over-TLS draft update (D. Wessels, S. Dickinson)   IETF 93:  Update on 5966bis and EDNS0 keepalive (Sara Dickinson)   DNS-OARC Fall workshop 2015:  Using TLS for DNS Privacy in practice (Sara Dickinson)   IETF 91:  DNS over TCP and TLS - draft-hzhwm-dprive-start-tls-for-dns-00 (John Heidermann, Sara Dickinson) A short video is demonstrating TCP connection re-use, pipelining, TCP Fast Open and DNS-over-TLS: DNS-over-TLS demo video   IETF 89:  T-DNS: Connection-Oriented DNS to Improve Privacy and Security (Duane Wessels)   DNS-OARC Spring workshop 2014:   T-DNS: Connection-Oriented DNS to Improve Privacy and Security (John Heidemann)   getdns-api implementation (Willen Toorop)\n    Technical reports   T-DNS: Connection-Oriented DNS to Improve Privacy and Security (http://www.isi.edu/publications/trpublic/files/tr-693.pdf)\n  http://googlecode.blogspot.co.uk/2012/01/lets-make-tcp-faster.html\n  "
},
{
	"uri": "http://dnsprivacy.org/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://dnsprivacy.org/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]